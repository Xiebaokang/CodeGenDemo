/*******************************************************************************
* Copyright (C) 2016-2021 Advanced Micro Devices, Inc. All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell cop-
* ies of the Software, and to permit persons to whom the Software is furnished
* to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IM-
* PLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
* FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
* COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
* IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNE-
* CTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*******************************************************************************/

/**************************************************
* This file was generated by Tensile:             *
* https://github.com/ROCmSoftwarePlatform/Tensile *
**************************************************/


#include "/home/pangyunfei/bizefeng/Tensile/bench_test_one_NN_sgemm_source/1_BenchmarkProblems/Cij_Aik_Bkj_S_00/00_Final/source/Cij_Aik_Bkj_S_MT64x48x32_SN_K1.h"

#include "Cij_Aik_Bkj_S_MT64x48x32_SN_K1.h"



  /******************************************/
  /* Function Prefix                        */
  /******************************************/



/* tile parameters */
#define NUM_THREADS 256 //每个workgroup的线程数量
#define SG0I 16 //wg的第一维大小
#define SG1J 8 //wg的第二维大小
#define TT0I 4 //tt的第一维大小
#define TT1J 6 //tt的第二维大小
#define MT0I (SG0I*TT0I) //每个wg处理的tile c的第一维大小  64
#define MT1J (SG1J*TT1J) //每个wg处理的tile c的第二维大小  48
#define VECTOR_WIDTH 2 
// 从global加载每次的数据宽度
#define GLOBAL_LOAD_VECTOR_WIDTH_A 2
#define GLOBAL_LOAD_VECTOR_WIDTH_B 2
#define GLOBAL_WRITE_VECTOR_WIDTH 2

/* DepthU parameters*/
#define CPSV (NUM_THREADS / MT0I * VECTOR_WIDTH)  // 8
#define LOCAL_SPLITU 2
#define UNROLL 16
#define LOCAL_DEPTHU (LOCAL_SPLITU*UNROLL)  // 32

/* other */
#define PAD 0
#define WORK_GROUP_MAPPING 8

/* num loads parallel and perpendicular to coalesced */
#define NLCA 1
#define NLCB 1
// 指搬入的tilea tileb分成几大块
#define NLPA 4
#define NLPB 3

/* load sizes parallel and perpendicular to coalesced */
#define LSCA (MT0I/NLCA)   // 64 / 1 = 64
#define LSPA (LOCAL_DEPTHU/NLPA)    /// 32 / 4 = 8
#define LSCB (LOCAL_DEPTHU/NLCB)    // 32 /1 = 32
#define LSPB (MT1J/NLPB)    // 48 / 3 = 16
#define LVCA (LSCA/GLOBAL_LOAD_VECTOR_WIDTH_A)  // 32
#define LVCB (LSCB/GLOBAL_LOAD_VECTOR_WIDTH_B)  // 2
#define LVPA (LSPA/GLOBAL_LOAD_VECTOR_WIDTH_A)  // 4
#define LVPB (LSPB/GLOBAL_LOAD_VECTOR_WIDTH_B)  // 8
#define LDS_OFFSET_B 2048
#define LDS_NUM_ELEMENTS 7680
#define LDS_OFFSET_BLK 4096

/* global memory indices */
#define GLOBAL_D(IDX0I, IDX1J) (( ((int64_t)IDX0I)*strideD0I + ((int64_t)IDX1J)*strideD1J ))
#define GLOBAL_C(IDX0I, IDX1J) (( ((int64_t)IDX0I)*strideC0I + ((int64_t)IDX1J)*strideC1J ))
#define GLOBAL_OFFSET_A(IDX0I, IDXK) (( ((int64_t)IDX0I)*strideA0I + ((int64_t)IDXK)*strideAK ))
#define GLOBAL_OFFSET_B(IDXK, IDX1J) (( ((int64_t)IDXK)*strideBK + ((int64_t)IDX1J)*strideB1J ))

/* data types */
#define DATA_TYPE float
#define DEST_DATA_TYPE float
#define COMPUTE_DATA_TYPE float
#define MAGIC_DIV1(dividend, magicNumber, magicShift) ((uint64_t)(dividend) * magicNumber >> magicShift)

/* MAC's */
#define MAC(A,B,DST) DST += A*B
#define TYPE_MAC(MULA,MULB,DST) DST = MAC(MULA,MULB,DST);
#define TYPE_MAC_WRITE(DST,ALPHA,REG) DST = (ALPHA)*(REG);

/* 4x6 micro-tile */
#define MAC_4x6\
  TYPE_MAC(rA[0],rB[0],rC[0+0*TT0I]); \
  TYPE_MAC(rA[1],rB[0],rC[1+0*TT0I]); \
  TYPE_MAC(rA[2],rB[0],rC[2+0*TT0I]); \
  TYPE_MAC(rA[3],rB[0],rC[3+0*TT0I]); \
  TYPE_MAC(rA[0],rB[1],rC[0+1*TT0I]); \
  TYPE_MAC(rA[1],rB[1],rC[1+1*TT0I]); \
  TYPE_MAC(rA[2],rB[1],rC[2+1*TT0I]); \
  TYPE_MAC(rA[3],rB[1],rC[3+1*TT0I]); \
  TYPE_MAC(rA[0],rB[2],rC[0+2*TT0I]); \
  TYPE_MAC(rA[1],rB[2],rC[1+2*TT0I]); \
  TYPE_MAC(rA[2],rB[2],rC[2+2*TT0I]); \
  TYPE_MAC(rA[3],rB[2],rC[3+2*TT0I]); \
  TYPE_MAC(rA[0],rB[3],rC[0+3*TT0I]); \
  TYPE_MAC(rA[1],rB[3],rC[1+3*TT0I]); \
  TYPE_MAC(rA[2],rB[3],rC[2+3*TT0I]); \
  TYPE_MAC(rA[3],rB[3],rC[3+3*TT0I]); \
  TYPE_MAC(rA[0],rB[4],rC[0+4*TT0I]); \
  TYPE_MAC(rA[1],rB[4],rC[1+4*TT0I]); \
  TYPE_MAC(rA[2],rB[4],rC[2+4*TT0I]); \
  TYPE_MAC(rA[3],rB[4],rC[3+4*TT0I]); \
  TYPE_MAC(rA[0],rB[5],rC[0+5*TT0I]); \
  TYPE_MAC(rA[1],rB[5],rC[1+5*TT0I]); \
  TYPE_MAC(rA[2],rB[5],rC[2+5*TT0I]); \
  TYPE_MAC(rA[3],rB[5],rC[3+5*TT0I]); \

#define MAC_4x6_BLK\
  TYPE_MAC(rA[0+TT0I],rB[0+TT1J],rC[0+0*TT0I]); \
  TYPE_MAC(rA[1+TT0I],rB[0+TT1J],rC[1+0*TT0I]); \
  TYPE_MAC(rA[2+TT0I],rB[0+TT1J],rC[2+0*TT0I]); \
  TYPE_MAC(rA[3+TT0I],rB[0+TT1J],rC[3+0*TT0I]); \
  TYPE_MAC(rA[0+TT0I],rB[1+TT1J],rC[0+1*TT0I]); \
  TYPE_MAC(rA[1+TT0I],rB[1+TT1J],rC[1+1*TT0I]); \
  TYPE_MAC(rA[2+TT0I],rB[1+TT1J],rC[2+1*TT0I]); \
  TYPE_MAC(rA[3+TT0I],rB[1+TT1J],rC[3+1*TT0I]); \
  TYPE_MAC(rA[0+TT0I],rB[2+TT1J],rC[0+2*TT0I]); \
  TYPE_MAC(rA[1+TT0I],rB[2+TT1J],rC[1+2*TT0I]); \
  TYPE_MAC(rA[2+TT0I],rB[2+TT1J],rC[2+2*TT0I]); \
  TYPE_MAC(rA[3+TT0I],rB[2+TT1J],rC[3+2*TT0I]); \
  TYPE_MAC(rA[0+TT0I],rB[3+TT1J],rC[0+3*TT0I]); \
  TYPE_MAC(rA[1+TT0I],rB[3+TT1J],rC[1+3*TT0I]); \
  TYPE_MAC(rA[2+TT0I],rB[3+TT1J],rC[2+3*TT0I]); \
  TYPE_MAC(rA[3+TT0I],rB[3+TT1J],rC[3+3*TT0I]); \
  TYPE_MAC(rA[0+TT0I],rB[4+TT1J],rC[0+4*TT0I]); \
  TYPE_MAC(rA[1+TT0I],rB[4+TT1J],rC[1+4*TT0I]); \
  TYPE_MAC(rA[2+TT0I],rB[4+TT1J],rC[2+4*TT0I]); \
  TYPE_MAC(rA[3+TT0I],rB[4+TT1J],rC[3+4*TT0I]); \
  TYPE_MAC(rA[0+TT0I],rB[5+TT1J],rC[0+5*TT0I]); \
  TYPE_MAC(rA[1+TT0I],rB[5+TT1J],rC[1+5*TT0I]); \
  TYPE_MAC(rA[2+TT0I],rB[5+TT1J],rC[2+5*TT0I]); \
  TYPE_MAC(rA[3+TT0I],rB[5+TT1J],rC[3+5*TT0I]); \

/* hard-coded initial strides CD*/
/* hard-coded initial strides AB */
#define strideD0I 1
#define strideC0I 1
#define strideA0I 1
#define strideBK 1


  /******************************************/
  /* Begin Kernel                           */
  /******************************************/

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
extern "C"
__global__ void
__launch_bounds__(256)
Cij_Aik_Bkj_S_MT64x48x32_SN_K1(
  float *D,
  float const * C,
  float const * A,
  float const * B,
  float const alpha,
  unsigned int const strideD1J,
  unsigned int const strideC1J,
  unsigned int const strideAK,
  unsigned int const strideB1J,
  unsigned int size0I,
  unsigned int size1J,
  unsigned int sizeK,
  unsigned int staggerUIterParm,
  unsigned int problemNumGroupTiles0,
  unsigned int problemNumGroupTiles1 )
#pragma clang diagnostic pop

 {


  /******************************************/
  /* Allocate Resources                     */
  /******************************************/

  unsigned int serial = hc_get_workitem_id(0);
  unsigned int sgId = serial / (SG0I*SG1J); //wg第三维的index
#define SCALAR_ZERO (float)(0)
#define SCALAR_OOB_DATA SCALAR_ZERO
  /* registers for MAC's */
  DEST_DATA_TYPE rC[TT0I*TT1J];
  DATA_TYPE rA[TT0I*2];
  DATA_TYPE rB[TT1J*2];

  /* registers for global->local */
  DATA_TYPE a_0_0_0_0;
  DATA_TYPE a_0_1_0_0;
  DATA_TYPE a_0_0_1_0;
  DATA_TYPE a_0_1_1_0;
  DATA_TYPE a_0_0_2_0;
  DATA_TYPE a_0_1_2_0;
  DATA_TYPE a_0_0_3_0;
  DATA_TYPE a_0_1_3_0;
  DATA_TYPE b_0_0_0_0;
  DATA_TYPE b_0_1_0_0;
  DATA_TYPE b_0_0_1_0;
  DATA_TYPE b_0_1_1_0;
  DATA_TYPE b_0_0_2_0;
  DATA_TYPE b_0_1_2_0;

  /* allocate local memory */
  __shared__ DATA_TYPE localMemory[LDS_NUM_ELEMENTS];

  typedef struct MagicStruct {unsigned M; int a; int s;} MagicStruct;
  const unsigned MAGIC_STRUCT_A = 0x80000000; // for extracting a-bit from shift kernarg
#define MAGIC_DIV2(dividend, magic) (((((uint64_t)(dividend) * magic.M) >> 32) + dividend*magic.a) >> magic.s)


  /******************************************/
  /* Local Read Addresses                   */
  /******************************************/


  /* local read addresses: tile assignments a/b */

  unsigned int lr0I = (serial % SG0I); //wg第一维的index  bx[0, 16]
  unsigned int lr1J = (serial / SG0I) % SG1J; //wg第二维的index  by[0, 8]


  /* local read addresses: final offsets a */

  unsigned int localReadOffsetA = lr0I*VECTOR_WIDTH + sgId*(MT0I+PAD); // bx * 2 + bz * 64


  /* local read addresses: final offsets b */

  unsigned int localReadOffsetB = lr1J*VECTOR_WIDTH + sgId*(MT1J+PAD) + LDS_OFFSET_B;


  /* local read addresses: declare addresses a */

  DATA_TYPE *localReadA;


  /* local read addresses: declare addresses b */

  DATA_TYPE *localReadB;



  /******************************************/
  /* Begin setupNewTile, isPap=False           */
  /******************************************/


  /* global read addresses: work-group */

  unsigned int wg0I = hc_get_group_id(0); // blockIdx_x 
  unsigned int wg1J = hc_get_group_id(1); // blockIdx_y 
  unsigned int nwg0I = hc_get_num_groups(0); // gridDim_x
  unsigned int nwg1J = hc_get_num_groups(1); // gridDim_y

  // 在wg之间将wg以第二维度8个一组切分

  //算得每组内部该wg的以一维表示的index

  uint64_t wgSerial = wg0I + (wg1J % WORK_GROUP_MAPPING) * nwg0I;// within block

  //
  unsigned int block = wg1J / WORK_GROUP_MAPPING;
  // blockRemainder检测是否存在边界块
  unsigned int blockRemainder = (wg1J < nwg1J-(nwg1J % WORK_GROUP_MAPPING) ) ? 0 : nwg1J % WORK_GROUP_MAPPING;
  if ( blockRemainder == 0) {
    wg0I = wgSerial / 8;
    wg1J = wgSerial % 8 + block*WORK_GROUP_MAPPING;
  } else if ( blockRemainder == 1) {
    wg0I = wgSerial / 1;
    wg1J = wgSerial % 1 + block*WORK_GROUP_MAPPING;
  } else if ( blockRemainder == 2) {
    wg0I = wgSerial / 2;
    wg1J = wgSerial % 2 + block*WORK_GROUP_MAPPING;
  } else if ( blockRemainder == 3) {
    wg0I = wgSerial / 3;
    wg1J = wgSerial % 3 + block*WORK_GROUP_MAPPING;
  } else if ( blockRemainder == 4) {
    wg0I = wgSerial / 4;
    wg1J = wgSerial % 4 + block*WORK_GROUP_MAPPING;
  } else if ( blockRemainder == 5) {
    wg0I = wgSerial / 5;
    wg1J = wgSerial % 5 + block*WORK_GROUP_MAPPING;
  } else if ( blockRemainder == 6) {
    wg0I = wgSerial / 6;
    wg1J = wgSerial % 6 + block*WORK_GROUP_MAPPING;
  } else {
    wg0I = wgSerial / 7;
    wg1J = wgSerial % 7 + block*WORK_GROUP_MAPPING;
  }


  /* global read addresses: tile offset assignment a */

  unsigned int globalReadOffsetA0I = (serial%LVCA)*GLOBAL_LOAD_VECTOR_WIDTH_A + (wg0I)*MT0I;


  /* global read addresses: tile offset assignment b */

  unsigned int globalReadOffsetB1J = (serial/LVCB) + (wg1J)*MT1J;


  /* global read addresses: unroll assignment a */

  unsigned int globalReadOffsetAK = (serial/LVCA);


  /* global read addresses: unroll assignment b */

  unsigned int globalReadOffsetBK = (serial%LVCB)*GLOBAL_LOAD_VECTOR_WIDTH_B;


  /* global read addresses: tile offsets a */

  unsigned int flattenedOffsetA_0_0 = globalReadOffsetA0I + 0 + 0*LSCA;
  flattenedOffsetA_0_0 = (flattenedOffsetA_0_0 > (size0I-1)) ? (size0I-1):flattenedOffsetA_0_0;
  unsigned int globalReadOffsetA0I_0_0 = flattenedOffsetA_0_0;


  /* global read addresses: tile offsets b */

  unsigned int flattenedOffsetB_0_0 = globalReadOffsetB1J + 0 + 0*LSPB;
  flattenedOffsetB_0_0 = (flattenedOffsetB_0_0 > (size1J-1)) ? (size1J-1):flattenedOffsetB_0_0;
  unsigned int globalReadOffsetB1J_0_0 = flattenedOffsetB_0_0;
  unsigned int flattenedOffsetB_1_0 = globalReadOffsetB1J + 0 + 1*LSPB;
  flattenedOffsetB_1_0 = (flattenedOffsetB_1_0 > (size1J-1)) ? (size1J-1):flattenedOffsetB_1_0;
  unsigned int globalReadOffsetB1J_1_0 = flattenedOffsetB_1_0;
  unsigned int flattenedOffsetB_2_0 = globalReadOffsetB1J + 0 + 2*LSPB;
  flattenedOffsetB_2_0 = (flattenedOffsetB_2_0 > (size1J-1)) ? (size1J-1):flattenedOffsetB_2_0;
  unsigned int globalReadOffsetB1J_2_0 = flattenedOffsetB_2_0;


  /* global read addresses: unroll offsets a */
  // 每个间隔8个
  unsigned int globalReadOffsetAK_0_0 = globalReadOffsetAK + 0 + 0*LSPA; // 0
  unsigned int globalReadOffsetAK_1_0 = globalReadOffsetAK + 0 + 1*LSPA; // 8
  unsigned int globalReadOffsetAK_2_0 = globalReadOffsetAK + 0 + 2*LSPA; // 16
  unsigned int globalReadOffsetAK_3_0 = globalReadOffsetAK + 0 + 3*LSPA; // 24


  /* global read addresses: unroll offsets b */

  unsigned int globalReadOffsetBK_0_0 = globalReadOffsetBK + 0 + 0*LSCB;


  /* global read addresses: final offsets a */

  // 每个tilea分成4份，间隔8*1024
  // GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAK_0_0) ) = globalReadOffsetA0I_0_0 * 1 + globalReadOffsetAK_0_0 * 1024
  int64_t globalReadOffsetA_0_0_0_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAK_0_0) );
  int64_t globalReadOffsetA_0_0_1_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAK_1_0) );
  int64_t globalReadOffsetA_0_0_2_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAK_2_0) );
  int64_t globalReadOffsetA_0_0_3_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAK_3_0) );


  /* global read addresses: final offsets b */

  int64_t globalReadOffsetB_0_0_0_0 = GLOBAL_OFFSET_B( (globalReadOffsetBK_0_0), (globalReadOffsetB1J_0_0) );
  int64_t globalReadOffsetB_0_0_1_0 = GLOBAL_OFFSET_B( (globalReadOffsetBK_0_0), (globalReadOffsetB1J_1_0) );
  int64_t globalReadOffsetB_0_0_2_0 = GLOBAL_OFFSET_B( (globalReadOffsetBK_0_0), (globalReadOffsetB1J_2_0) );


  /* global read addresses: addresses a */

  DATA_TYPE const *globalReadA_0_0_0_0 = A + globalReadOffsetA_0_0_0_0;
  DATA_TYPE const *globalReadA_0_0_1_0 = A + globalReadOffsetA_0_0_1_0;
  DATA_TYPE const *globalReadA_0_0_2_0 = A + globalReadOffsetA_0_0_2_0;
  DATA_TYPE const *globalReadA_0_0_3_0 = A + globalReadOffsetA_0_0_3_0;


  /* global read addresses: addresses b */

  DATA_TYPE const *globalReadB_0_0_0_0 = B + globalReadOffsetB_0_0_0_0;
  DATA_TYPE const *globalReadB_0_0_1_0 = B + globalReadOffsetB_0_0_1_0;
  DATA_TYPE const *globalReadB_0_0_2_0 = B + globalReadOffsetB_0_0_2_0;


  /* global read addresses: increments a */

  int64_t globalReadIncAK = (int64_t)strideAK*LOCAL_DEPTHU;


  /* global read addresses: increments b */

  int64_t globalReadIncBK = (int64_t)strideBK*LOCAL_DEPTHU;


  /******************************************/
  /* Local Write Addresses                  */
  /******************************************/


  /* local write addresses: tile assignment A */
  unsigned int lwA0I = (serial%LVCA)*GLOBAL_LOAD_VECTOR_WIDTH_A;


  /* local write addresses: tile assignment B */
  unsigned int lwB1J = (serial/LVCB);


  /* local write addresses: unroll assignment A */
  unsigned int lwAK = (serial/LVCA);


  /* local write addresses: unroll assignment B */
  unsigned int lwBK = (serial%LVCB)*GLOBAL_LOAD_VECTOR_WIDTH_B;


  /* local write addresses: first offset a */

  unsigned int localWriteFirstOffsetA = lwA0I + lwAK*(MT0I+PAD);


  /* local write addresses: first offset b */

  unsigned int localWriteFirstOffsetB = lwB1J + lwBK*(MT1J+PAD) + LDS_OFFSET_B;


  /* local write addresses: final offsets A */
  unsigned int localWriteOffsetA_0_0_0_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 0*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_1_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 1*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_2_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 2*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_3_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 3*LSPA)*(MT0I+PAD);


  /* local write addresses: final offsets B */
  unsigned int localWriteOffsetB_0_0_0_0 = localWriteFirstOffsetB + (0 + 0*LSCB)*(MT1J+PAD) + (0 + 0*LSPB);
  unsigned int localWriteOffsetB_0_0_0_1 = localWriteFirstOffsetB + (1 + 0*LSCB)*(MT1J+PAD) + (0 + 0*LSPB);
  unsigned int localWriteOffsetB_0_0_1_0 = localWriteFirstOffsetB + (0 + 0*LSCB)*(MT1J+PAD) + (0 + 1*LSPB);
  unsigned int localWriteOffsetB_0_0_1_1 = localWriteFirstOffsetB + (1 + 0*LSCB)*(MT1J+PAD) + (0 + 1*LSPB);
  unsigned int localWriteOffsetB_0_0_2_0 = localWriteFirstOffsetB + (0 + 0*LSCB)*(MT1J+PAD) + (0 + 2*LSPB);
  unsigned int localWriteOffsetB_0_0_2_1 = localWriteFirstOffsetB + (1 + 0*LSCB)*(MT1J+PAD) + (0 + 2*LSPB);


  // 指针都是float类型的
  /* local write addresses: declare addresses A */
  DATA_TYPE *localWriteA_0_0_0_0;
  DATA_TYPE *localWriteA_0_0_1_0;
  DATA_TYPE *localWriteA_0_0_2_0;
  DATA_TYPE *localWriteA_0_0_3_0;


  /* local write addresses: declare addresses B */
  DATA_TYPE *localWriteB_0_0_0_0;
  DATA_TYPE *localWriteB_0_0_0_1;
  DATA_TYPE *localWriteB_0_0_1_0;
  DATA_TYPE *localWriteB_0_0_1_1;
  DATA_TYPE *localWriteB_0_0_2_0;
  DATA_TYPE *localWriteB_0_0_2_1;


  /* local write init pointers A */
  localWriteA_0_0_0_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_0_0);
  localWriteA_0_0_1_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_1_0);
  localWriteA_0_0_2_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_2_0);
  localWriteA_0_0_3_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_3_0);


  /* local write init pointers B */
  localWriteB_0_0_0_0 = (DATA_TYPE *)(localMemory + localWriteOffsetB_0_0_0_0);
  localWriteB_0_0_0_1 = (DATA_TYPE *)(localMemory + localWriteOffsetB_0_0_0_1);
  localWriteB_0_0_1_0 = (DATA_TYPE *)(localMemory + localWriteOffsetB_0_0_1_0);
  localWriteB_0_0_1_1 = (DATA_TYPE *)(localMemory + localWriteOffsetB_0_0_1_1);
  localWriteB_0_0_2_0 = (DATA_TYPE *)(localMemory + localWriteOffsetB_0_0_2_0);
  localWriteB_0_0_2_1 = (DATA_TYPE *)(localMemory + localWriteOffsetB_0_0_2_1);

  /* declare loop num iterations */

  int numIterK;


  /* Compute summation loop num iter */
  if(alpha == (float)(0)) sizeK = 0;  // Short circuit check alpha=0, skip A*B 
  numIterK = sizeK / LOCAL_DEPTHU;

  const unsigned origNumIter = numIterK;
  unsigned staggerUIter = (wg0I & staggerUIterParm);
  staggerUIter = (staggerUIter << 1); // shift so each stagger has 256-byte stride

  globalReadA_0_0_0_0 += (staggerUIter * globalReadIncAK); // apply stagger offset
  globalReadA_0_0_1_0 += (staggerUIter * globalReadIncAK); // apply stagger offset
  globalReadA_0_0_2_0 += (staggerUIter * globalReadIncAK); // apply stagger offset
  globalReadA_0_0_3_0 += (staggerUIter * globalReadIncAK); // apply stagger offset


  globalReadB_0_0_0_0 += (staggerUIter * globalReadIncBK); // apply stagger offset
  globalReadB_0_0_1_0 += (staggerUIter * globalReadIncBK); // apply stagger offset
  globalReadB_0_0_2_0 += (staggerUIter * globalReadIncBK); // apply stagger offset

  staggerUIter += 1; // add PrefetchGlobalRead

  /* local read addresses: init pointers a */

  localReadA = (DATA_TYPE *)(localMemory + localReadOffsetA);

  /* local read addresses: init pointers b */

  localReadB = (DATA_TYPE *)(localMemory + localReadOffsetB);


  /* prefetch: global -> local */

  if (sizeK >= LOCAL_DEPTHU) {



    /* global read A */
    // 0
    a_0_0_0_0 = *(globalReadA_0_0_0_0 + 0);
    // 1
    a_0_1_0_0 = *(globalReadA_0_0_0_0 + 1);
    // 8 * 1024 + 0
    a_0_0_1_0 = *(globalReadA_0_0_1_0 + 0);
    // 8 * 1024 + 1
    a_0_1_1_0 = *(globalReadA_0_0_1_0 + 1);
    // 16 * 1024 + 0
    a_0_0_2_0 = *(globalReadA_0_0_2_0 + 0);
    // 16 * 1024 + 1
    a_0_1_2_0 = *(globalReadA_0_0_2_0 + 1);
    // 24 * 1024 + 0
    a_0_0_3_0 = *(globalReadA_0_0_3_0 + 0);
    // 24 * 1024 + 1
    a_0_1_3_0 = *(globalReadA_0_0_3_0 + 1);



    /* global read B */
    b_0_0_0_0 = *(globalReadB_0_0_0_0 + 0);
    b_0_1_0_0 = *(globalReadB_0_0_0_0 + 1);
    b_0_0_1_0 = *(globalReadB_0_0_1_0 + 0);
    b_0_1_1_0 = *(globalReadB_0_0_1_0 + 1);
    b_0_0_2_0 = *(globalReadB_0_0_2_0 + 0);
    b_0_1_2_0 = *(globalReadB_0_0_2_0 + 1);


    /* global read inc A for sumK */
    globalReadA_0_0_0_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_0_0) + 1*globalReadIncAK);
    if ((numIterK) == staggerUIter) {
      globalReadA_0_0_0_0 -= (origNumIter * globalReadIncAK); // wrap staggered offset back to row start
    }
    globalReadA_0_0_1_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_1_0) + 1*globalReadIncAK);
    if ((numIterK) == staggerUIter) {
      globalReadA_0_0_1_0 -= (origNumIter * globalReadIncAK); // wrap staggered offset back to row start
    }
    globalReadA_0_0_2_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_2_0) + 1*globalReadIncAK);
    if ((numIterK) == staggerUIter) {
      globalReadA_0_0_2_0 -= (origNumIter * globalReadIncAK); // wrap staggered offset back to row start
    }
    globalReadA_0_0_3_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_3_0) + 1*globalReadIncAK);
    if ((numIterK) == staggerUIter) {
      globalReadA_0_0_3_0 -= (origNumIter * globalReadIncAK); // wrap staggered offset back to row start
    }

    /* global read inc B for sumK */
    globalReadB_0_0_0_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadB_0_0_0_0) + 1*globalReadIncBK);
    if ((numIterK) == staggerUIter) {
      globalReadB_0_0_0_0 -= (origNumIter * globalReadIncBK); // wrap staggered offset back to row start
    }
    globalReadB_0_0_1_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadB_0_0_1_0) + 1*globalReadIncBK);
    if ((numIterK) == staggerUIter) {
      globalReadB_0_0_1_0 -= (origNumIter * globalReadIncBK); // wrap staggered offset back to row start
    }
    globalReadB_0_0_2_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadB_0_0_2_0) + 1*globalReadIncBK);
    if ((numIterK) == staggerUIter) {
      globalReadB_0_0_2_0 -= (origNumIter * globalReadIncBK); // wrap staggered offset back to row start
    }


    /******************************************/
    /* End setupNewTile, isPap=False             */
    /******************************************/




  rC[0] = SCALAR_ZERO;
  rC[1] = SCALAR_ZERO;
  rC[2] = SCALAR_ZERO;
  rC[3] = SCALAR_ZERO;
  rC[4] = SCALAR_ZERO;
  rC[5] = SCALAR_ZERO;
  rC[6] = SCALAR_ZERO;
  rC[7] = SCALAR_ZERO;
  rC[8] = SCALAR_ZERO;
  rC[9] = SCALAR_ZERO;
  rC[10] = SCALAR_ZERO;
  rC[11] = SCALAR_ZERO;
  rC[12] = SCALAR_ZERO;
  rC[13] = SCALAR_ZERO;
  rC[14] = SCALAR_ZERO;
  rC[15] = SCALAR_ZERO;
  rC[16] = SCALAR_ZERO;
  rC[17] = SCALAR_ZERO;
  rC[18] = SCALAR_ZERO;
  rC[19] = SCALAR_ZERO;
  rC[20] = SCALAR_ZERO;
  rC[21] = SCALAR_ZERO;
  rC[22] = SCALAR_ZERO;
  rC[23] = SCALAR_ZERO;




    /* local write a */
    //localWriteA_0_0_0_0 本来就是float的指针
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wconditional-uninitialized"
    *(localWriteA_0_0_0_0 + 0) = a_0_0_0_0;
    *(localWriteA_0_0_0_0 + 1) = a_0_1_0_0;
    *(localWriteA_0_0_1_0 + 0) = a_0_0_1_0;
    *(localWriteA_0_0_1_0 + 1) = a_0_1_1_0;
    *(localWriteA_0_0_2_0 + 0) = a_0_0_2_0;
    *(localWriteA_0_0_2_0 + 1) = a_0_1_2_0;
    *(localWriteA_0_0_3_0 + 0) = a_0_0_3_0;
    *(localWriteA_0_0_3_0 + 1) = a_0_1_3_0;
#pragma clang diagnostic pop

    /* local write b */
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wconditional-uninitialized"
    *(localWriteB_0_0_0_0 + 0) = b_0_0_0_0;
    *(localWriteB_0_0_0_1 + 0) = b_0_1_0_0;
    *(localWriteB_0_0_1_0 + 0) = b_0_0_1_0;
    *(localWriteB_0_0_1_1 + 0) = b_0_1_1_0;
    *(localWriteB_0_0_2_0 + 0) = b_0_0_2_0;
    *(localWriteB_0_0_2_1 + 0) = b_0_1_2_0;
#pragma clang diagnostic pop


    /* local write swap a */

    localWriteOffsetA_0_0_0_0 = (localWriteOffsetA_0_0_0_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_1_0 = (localWriteOffsetA_0_0_1_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_2_0 = (localWriteOffsetA_0_0_2_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_3_0 = (localWriteOffsetA_0_0_3_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);


    /* local write swap b */

    localWriteOffsetB_0_0_0_0 = (localWriteOffsetB_0_0_0_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetB_0_0_0_1 = (localWriteOffsetB_0_0_0_1 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetB_0_0_1_0 = (localWriteOffsetB_0_0_1_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetB_0_0_1_1 = (localWriteOffsetB_0_0_1_1 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetB_0_0_2_0 = (localWriteOffsetB_0_0_2_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetB_0_0_2_1 = (localWriteOffsetB_0_0_2_1 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);


    /* local write init pointers A */
    localWriteA_0_0_0_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_0_0);
    localWriteA_0_0_1_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_1_0);
    localWriteA_0_0_2_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_2_0);
    localWriteA_0_0_3_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_3_0);


    /* local write init pointers B */
    localWriteB_0_0_0_0 = (DATA_TYPE *)(localMemory + localWriteOffsetB_0_0_0_0);
    localWriteB_0_0_0_1 = (DATA_TYPE *)(localMemory + localWriteOffsetB_0_0_0_1);
    localWriteB_0_0_1_0 = (DATA_TYPE *)(localMemory + localWriteOffsetB_0_0_1_0);
    localWriteB_0_0_1_1 = (DATA_TYPE *)(localMemory + localWriteOffsetB_0_0_1_1);
    localWriteB_0_0_2_0 = (DATA_TYPE *)(localMemory + localWriteOffsetB_0_0_2_0);
    localWriteB_0_0_2_1 = (DATA_TYPE *)(localMemory + localWriteOffsetB_0_0_2_1);


    __syncthreads(); //


    /* local read prefetch a */
    // 0 * 16 * 2 + 0
    // ra: 0 1 2 3 
    // localReadA: 0 1 32 33
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 
    rA[0*VECTOR_WIDTH+1] = localReadA[0*SG0I*VECTOR_WIDTH + 1]; 
    rA[1*VECTOR_WIDTH+0] = localReadA[1*SG0I*VECTOR_WIDTH + 0]; 
    rA[1*VECTOR_WIDTH+1] = localReadA[1*SG0I*VECTOR_WIDTH + 1]; 


    /* local read prefetch b */
    // rb: 0 1 2 3 4 5
    // localReadB:0 1 16 17 32 33
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 
    rB[0*VECTOR_WIDTH+1] = localReadB[0*SG1J*VECTOR_WIDTH + 1]; 
    rB[1*VECTOR_WIDTH+0] = localReadB[1*SG1J*VECTOR_WIDTH + 0]; 
    rB[1*VECTOR_WIDTH+1] = localReadB[1*SG1J*VECTOR_WIDTH + 1]; 
    rB[2*VECTOR_WIDTH+0] = localReadB[2*SG1J*VECTOR_WIDTH + 0]; 
    rB[2*VECTOR_WIDTH+1] = localReadB[2*SG1J*VECTOR_WIDTH + 1]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);  // 2 * (64 + 0) = 128


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);

  } // end PrefetchGlobalRead
  else { // still need to initC even if skipped prefetch

  rC[0] = SCALAR_ZERO;
  rC[1] = SCALAR_ZERO;
  rC[2] = SCALAR_ZERO;
  rC[3] = SCALAR_ZERO;
  rC[4] = SCALAR_ZERO;
  rC[5] = SCALAR_ZERO;
  rC[6] = SCALAR_ZERO;
  rC[7] = SCALAR_ZERO;
  rC[8] = SCALAR_ZERO;
  rC[9] = SCALAR_ZERO;
  rC[10] = SCALAR_ZERO;
  rC[11] = SCALAR_ZERO;
  rC[12] = SCALAR_ZERO;
  rC[13] = SCALAR_ZERO;
  rC[14] = SCALAR_ZERO;
  rC[15] = SCALAR_ZERO;
  rC[16] = SCALAR_ZERO;
  rC[17] = SCALAR_ZERO;
  rC[18] = SCALAR_ZERO;
  rC[19] = SCALAR_ZERO;
  rC[20] = SCALAR_ZERO;
  rC[21] = SCALAR_ZERO;
  rC[22] = SCALAR_ZERO;
  rC[23] = SCALAR_ZERO;
  }


  /******************************************/
  /* Unrolled Loop(s) - Begin               */
  /******************************************/

  while (numIterK-- > 1) {


    /******************************************/
    /* Unrolled Loop 1/1 - Begin              */
    /******************************************/



    /* Begin Each Unroll: Check VGPR.checkin for INT8 LW */




    /* global read A */
    a_0_0_0_0 = *(globalReadA_0_0_0_0 + 0);
    a_0_1_0_0 = *(globalReadA_0_0_0_0 + 1);
    a_0_0_1_0 = *(globalReadA_0_0_1_0 + 0);
    a_0_1_1_0 = *(globalReadA_0_0_1_0 + 1);
    a_0_0_2_0 = *(globalReadA_0_0_2_0 + 0);
    a_0_1_2_0 = *(globalReadA_0_0_2_0 + 1);
    a_0_0_3_0 = *(globalReadA_0_0_3_0 + 0);
    a_0_1_3_0 = *(globalReadA_0_0_3_0 + 1);

    /* global read B */
    b_0_0_0_0 = *(globalReadB_0_0_0_0 + 0);
    b_0_1_0_0 = *(globalReadB_0_0_0_0 + 1);
    b_0_0_1_0 = *(globalReadB_0_0_1_0 + 0);
    b_0_1_1_0 = *(globalReadB_0_0_1_0 + 1);
    b_0_0_2_0 = *(globalReadB_0_0_2_0 + 0);
    b_0_1_2_0 = *(globalReadB_0_0_2_0 + 1);

    /* global read inc A for sumK */
    globalReadA_0_0_0_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_0_0) + 1*globalReadIncAK);
    if ((numIterK) == staggerUIter) {
      globalReadA_0_0_0_0 -= (origNumIter * globalReadIncAK); // wrap staggered offset back to row start
    }
    globalReadA_0_0_1_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_1_0) + 1*globalReadIncAK);
    if ((numIterK) == staggerUIter) {
      globalReadA_0_0_1_0 -= (origNumIter * globalReadIncAK); // wrap staggered offset back to row start
    }
    globalReadA_0_0_2_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_2_0) + 1*globalReadIncAK);
    if ((numIterK) == staggerUIter) {
      globalReadA_0_0_2_0 -= (origNumIter * globalReadIncAK); // wrap staggered offset back to row start
    }
    globalReadA_0_0_3_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_3_0) + 1*globalReadIncAK);
    if ((numIterK) == staggerUIter) {
      globalReadA_0_0_3_0 -= (origNumIter * globalReadIncAK); // wrap staggered offset back to row start
    }

    /* global read inc B for sumK */
    globalReadB_0_0_0_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadB_0_0_0_0) + 1*globalReadIncBK);
    if ((numIterK) == staggerUIter) {
      globalReadB_0_0_0_0 -= (origNumIter * globalReadIncBK); // wrap staggered offset back to row start
    }
    globalReadB_0_0_1_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadB_0_0_1_0) + 1*globalReadIncBK);
    if ((numIterK) == staggerUIter) {
      globalReadB_0_0_1_0 -= (origNumIter * globalReadIncBK); // wrap staggered offset back to row start
    }
    globalReadB_0_0_2_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadB_0_0_2_0) + 1*globalReadIncBK);
    if ((numIterK) == staggerUIter) {
      globalReadB_0_0_2_0 -= (origNumIter * globalReadIncBK); // wrap staggered offset back to row start
    }


    /* iter 0 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 
    rA[0*VECTOR_WIDTH+1+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 1]; 
    rA[1*VECTOR_WIDTH+0+TT0I] = localReadA[1*SG0I*VECTOR_WIDTH + 0]; 
    rA[1*VECTOR_WIDTH+1+TT0I] = localReadA[1*SG0I*VECTOR_WIDTH + 1]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 
    rB[0*VECTOR_WIDTH+1+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 1]; 
    rB[1*VECTOR_WIDTH+0+TT1J] = localReadB[1*SG1J*VECTOR_WIDTH + 0]; 
    rB[1*VECTOR_WIDTH+1+TT1J] = localReadB[1*SG1J*VECTOR_WIDTH + 1]; 
    rB[2*VECTOR_WIDTH+0+TT1J] = localReadB[2*SG1J*VECTOR_WIDTH + 0]; 
    rB[2*VECTOR_WIDTH+1+TT1J] = localReadB[2*SG1J*VECTOR_WIDTH + 1]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);  // 2 * 

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_4x6


    /* iter 1 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 
    rA[0*VECTOR_WIDTH+1] = localReadA[0*SG0I*VECTOR_WIDTH + 1]; 
    rA[1*VECTOR_WIDTH+0] = localReadA[1*SG0I*VECTOR_WIDTH + 0]; 
    rA[1*VECTOR_WIDTH+1] = localReadA[1*SG0I*VECTOR_WIDTH + 1]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 
    rB[0*VECTOR_WIDTH+1] = localReadB[0*SG1J*VECTOR_WIDTH + 1]; 
    rB[1*VECTOR_WIDTH+0] = localReadB[1*SG1J*VECTOR_WIDTH + 0]; 
    rB[1*VECTOR_WIDTH+1] = localReadB[1*SG1J*VECTOR_WIDTH + 1]; 
    rB[2*VECTOR_WIDTH+0] = localReadB[2*SG1J*VECTOR_WIDTH + 0]; 
    rB[2*VECTOR_WIDTH+1] = localReadB[2*SG1J*VECTOR_WIDTH + 1]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_4x6_BLK


    /* iter 2 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 
    rA[0*VECTOR_WIDTH+1+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 1]; 
    rA[1*VECTOR_WIDTH+0+TT0I] = localReadA[1*SG0I*VECTOR_WIDTH + 0]; 
    rA[1*VECTOR_WIDTH+1+TT0I] = localReadA[1*SG0I*VECTOR_WIDTH + 1]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 
    rB[0*VECTOR_WIDTH+1+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 1]; 
    rB[1*VECTOR_WIDTH+0+TT1J] = localReadB[1*SG1J*VECTOR_WIDTH + 0]; 
    rB[1*VECTOR_WIDTH+1+TT1J] = localReadB[1*SG1J*VECTOR_WIDTH + 1]; 
    rB[2*VECTOR_WIDTH+0+TT1J] = localReadB[2*SG1J*VECTOR_WIDTH + 0]; 
    rB[2*VECTOR_WIDTH+1+TT1J] = localReadB[2*SG1J*VECTOR_WIDTH + 1]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_4x6


    /* iter 3 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 
    rA[0*VECTOR_WIDTH+1] = localReadA[0*SG0I*VECTOR_WIDTH + 1]; 
    rA[1*VECTOR_WIDTH+0] = localReadA[1*SG0I*VECTOR_WIDTH + 0]; 
    rA[1*VECTOR_WIDTH+1] = localReadA[1*SG0I*VECTOR_WIDTH + 1]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 
    rB[0*VECTOR_WIDTH+1] = localReadB[0*SG1J*VECTOR_WIDTH + 1]; 
    rB[1*VECTOR_WIDTH+0] = localReadB[1*SG1J*VECTOR_WIDTH + 0]; 
    rB[1*VECTOR_WIDTH+1] = localReadB[1*SG1J*VECTOR_WIDTH + 1]; 
    rB[2*VECTOR_WIDTH+0] = localReadB[2*SG1J*VECTOR_WIDTH + 0]; 
    rB[2*VECTOR_WIDTH+1] = localReadB[2*SG1J*VECTOR_WIDTH + 1]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_4x6_BLK


    /* iter 4 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 
    rA[0*VECTOR_WIDTH+1+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 1]; 
    rA[1*VECTOR_WIDTH+0+TT0I] = localReadA[1*SG0I*VECTOR_WIDTH + 0]; 
    rA[1*VECTOR_WIDTH+1+TT0I] = localReadA[1*SG0I*VECTOR_WIDTH + 1]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 
    rB[0*VECTOR_WIDTH+1+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 1]; 
    rB[1*VECTOR_WIDTH+0+TT1J] = localReadB[1*SG1J*VECTOR_WIDTH + 0]; 
    rB[1*VECTOR_WIDTH+1+TT1J] = localReadB[1*SG1J*VECTOR_WIDTH + 1]; 
    rB[2*VECTOR_WIDTH+0+TT1J] = localReadB[2*SG1J*VECTOR_WIDTH + 0]; 
    rB[2*VECTOR_WIDTH+1+TT1J] = localReadB[2*SG1J*VECTOR_WIDTH + 1]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_4x6


    /* iter 5 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 
    rA[0*VECTOR_WIDTH+1] = localReadA[0*SG0I*VECTOR_WIDTH + 1]; 
    rA[1*VECTOR_WIDTH+0] = localReadA[1*SG0I*VECTOR_WIDTH + 0]; 
    rA[1*VECTOR_WIDTH+1] = localReadA[1*SG0I*VECTOR_WIDTH + 1]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 
    rB[0*VECTOR_WIDTH+1] = localReadB[0*SG1J*VECTOR_WIDTH + 1]; 
    rB[1*VECTOR_WIDTH+0] = localReadB[1*SG1J*VECTOR_WIDTH + 0]; 
    rB[1*VECTOR_WIDTH+1] = localReadB[1*SG1J*VECTOR_WIDTH + 1]; 
    rB[2*VECTOR_WIDTH+0] = localReadB[2*SG1J*VECTOR_WIDTH + 0]; 
    rB[2*VECTOR_WIDTH+1] = localReadB[2*SG1J*VECTOR_WIDTH + 1]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_4x6_BLK


    /* iter 6 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 
    rA[0*VECTOR_WIDTH+1+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 1]; 
    rA[1*VECTOR_WIDTH+0+TT0I] = localReadA[1*SG0I*VECTOR_WIDTH + 0]; 
    rA[1*VECTOR_WIDTH+1+TT0I] = localReadA[1*SG0I*VECTOR_WIDTH + 1]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 
    rB[0*VECTOR_WIDTH+1+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 1]; 
    rB[1*VECTOR_WIDTH+0+TT1J] = localReadB[1*SG1J*VECTOR_WIDTH + 0]; 
    rB[1*VECTOR_WIDTH+1+TT1J] = localReadB[1*SG1J*VECTOR_WIDTH + 1]; 
    rB[2*VECTOR_WIDTH+0+TT1J] = localReadB[2*SG1J*VECTOR_WIDTH + 0]; 
    rB[2*VECTOR_WIDTH+1+TT1J] = localReadB[2*SG1J*VECTOR_WIDTH + 1]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_4x6


    /* iter 7 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 
    rA[0*VECTOR_WIDTH+1] = localReadA[0*SG0I*VECTOR_WIDTH + 1]; 
    rA[1*VECTOR_WIDTH+0] = localReadA[1*SG0I*VECTOR_WIDTH + 0]; 
    rA[1*VECTOR_WIDTH+1] = localReadA[1*SG0I*VECTOR_WIDTH + 1]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 
    rB[0*VECTOR_WIDTH+1] = localReadB[0*SG1J*VECTOR_WIDTH + 1]; 
    rB[1*VECTOR_WIDTH+0] = localReadB[1*SG1J*VECTOR_WIDTH + 0]; 
    rB[1*VECTOR_WIDTH+1] = localReadB[1*SG1J*VECTOR_WIDTH + 1]; 
    rB[2*VECTOR_WIDTH+0] = localReadB[2*SG1J*VECTOR_WIDTH + 0]; 
    rB[2*VECTOR_WIDTH+1] = localReadB[2*SG1J*VECTOR_WIDTH + 1]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_4x6_BLK


    /* iter 8 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 
    rA[0*VECTOR_WIDTH+1+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 1]; 
    rA[1*VECTOR_WIDTH+0+TT0I] = localReadA[1*SG0I*VECTOR_WIDTH + 0]; 
    rA[1*VECTOR_WIDTH+1+TT0I] = localReadA[1*SG0I*VECTOR_WIDTH + 1]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 
    rB[0*VECTOR_WIDTH+1+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 1]; 
    rB[1*VECTOR_WIDTH+0+TT1J] = localReadB[1*SG1J*VECTOR_WIDTH + 0]; 
    rB[1*VECTOR_WIDTH+1+TT1J] = localReadB[1*SG1J*VECTOR_WIDTH + 1]; 
    rB[2*VECTOR_WIDTH+0+TT1J] = localReadB[2*SG1J*VECTOR_WIDTH + 0]; 
    rB[2*VECTOR_WIDTH+1+TT1J] = localReadB[2*SG1J*VECTOR_WIDTH + 1]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_4x6


    /* iter 9 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 
    rA[0*VECTOR_WIDTH+1] = localReadA[0*SG0I*VECTOR_WIDTH + 1]; 
    rA[1*VECTOR_WIDTH+0] = localReadA[1*SG0I*VECTOR_WIDTH + 0]; 
    rA[1*VECTOR_WIDTH+1] = localReadA[1*SG0I*VECTOR_WIDTH + 1]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 
    rB[0*VECTOR_WIDTH+1] = localReadB[0*SG1J*VECTOR_WIDTH + 1]; 
    rB[1*VECTOR_WIDTH+0] = localReadB[1*SG1J*VECTOR_WIDTH + 0]; 
    rB[1*VECTOR_WIDTH+1] = localReadB[1*SG1J*VECTOR_WIDTH + 1]; 
    rB[2*VECTOR_WIDTH+0] = localReadB[2*SG1J*VECTOR_WIDTH + 0]; 
    rB[2*VECTOR_WIDTH+1] = localReadB[2*SG1J*VECTOR_WIDTH + 1]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_4x6_BLK


    /* iter 10 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 
    rA[0*VECTOR_WIDTH+1+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 1]; 
    rA[1*VECTOR_WIDTH+0+TT0I] = localReadA[1*SG0I*VECTOR_WIDTH + 0]; 
    rA[1*VECTOR_WIDTH+1+TT0I] = localReadA[1*SG0I*VECTOR_WIDTH + 1]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 
    rB[0*VECTOR_WIDTH+1+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 1]; 
    rB[1*VECTOR_WIDTH+0+TT1J] = localReadB[1*SG1J*VECTOR_WIDTH + 0]; 
    rB[1*VECTOR_WIDTH+1+TT1J] = localReadB[1*SG1J*VECTOR_WIDTH + 1]; 
    rB[2*VECTOR_WIDTH+0+TT1J] = localReadB[2*SG1J*VECTOR_WIDTH + 0]; 
    rB[2*VECTOR_WIDTH+1+TT1J] = localReadB[2*SG1J*VECTOR_WIDTH + 1]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_4x6


    /* iter 11 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 
    rA[0*VECTOR_WIDTH+1] = localReadA[0*SG0I*VECTOR_WIDTH + 1]; 
    rA[1*VECTOR_WIDTH+0] = localReadA[1*SG0I*VECTOR_WIDTH + 0]; 
    rA[1*VECTOR_WIDTH+1] = localReadA[1*SG0I*VECTOR_WIDTH + 1]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 
    rB[0*VECTOR_WIDTH+1] = localReadB[0*SG1J*VECTOR_WIDTH + 1]; 
    rB[1*VECTOR_WIDTH+0] = localReadB[1*SG1J*VECTOR_WIDTH + 0]; 
    rB[1*VECTOR_WIDTH+1] = localReadB[1*SG1J*VECTOR_WIDTH + 1]; 
    rB[2*VECTOR_WIDTH+0] = localReadB[2*SG1J*VECTOR_WIDTH + 0]; 
    rB[2*VECTOR_WIDTH+1] = localReadB[2*SG1J*VECTOR_WIDTH + 1]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_4x6_BLK


    /* iter 12 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 
    rA[0*VECTOR_WIDTH+1+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 1]; 
    rA[1*VECTOR_WIDTH+0+TT0I] = localReadA[1*SG0I*VECTOR_WIDTH + 0]; 
    rA[1*VECTOR_WIDTH+1+TT0I] = localReadA[1*SG0I*VECTOR_WIDTH + 1]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 
    rB[0*VECTOR_WIDTH+1+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 1]; 
    rB[1*VECTOR_WIDTH+0+TT1J] = localReadB[1*SG1J*VECTOR_WIDTH + 0]; 
    rB[1*VECTOR_WIDTH+1+TT1J] = localReadB[1*SG1J*VECTOR_WIDTH + 1]; 
    rB[2*VECTOR_WIDTH+0+TT1J] = localReadB[2*SG1J*VECTOR_WIDTH + 0]; 
    rB[2*VECTOR_WIDTH+1+TT1J] = localReadB[2*SG1J*VECTOR_WIDTH + 1]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_4x6


    /* iter 13 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 
    rA[0*VECTOR_WIDTH+1] = localReadA[0*SG0I*VECTOR_WIDTH + 1]; 
    rA[1*VECTOR_WIDTH+0] = localReadA[1*SG0I*VECTOR_WIDTH + 0]; 
    rA[1*VECTOR_WIDTH+1] = localReadA[1*SG0I*VECTOR_WIDTH + 1]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 
    rB[0*VECTOR_WIDTH+1] = localReadB[0*SG1J*VECTOR_WIDTH + 1]; 
    rB[1*VECTOR_WIDTH+0] = localReadB[1*SG1J*VECTOR_WIDTH + 0]; 
    rB[1*VECTOR_WIDTH+1] = localReadB[1*SG1J*VECTOR_WIDTH + 1]; 
    rB[2*VECTOR_WIDTH+0] = localReadB[2*SG1J*VECTOR_WIDTH + 0]; 
    rB[2*VECTOR_WIDTH+1] = localReadB[2*SG1J*VECTOR_WIDTH + 1]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_4x6_BLK


    /* iter 14 (reset local read pointers iteration)  (swap and reset local write pointers iteration)  (swap local read pointers iteration)  */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 
    rA[0*VECTOR_WIDTH+1+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 1]; 
    rA[1*VECTOR_WIDTH+0+TT0I] = localReadA[1*SG0I*VECTOR_WIDTH + 0]; 
    rA[1*VECTOR_WIDTH+1+TT0I] = localReadA[1*SG0I*VECTOR_WIDTH + 1]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 
    rB[0*VECTOR_WIDTH+1+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 1]; 
    rB[1*VECTOR_WIDTH+0+TT1J] = localReadB[1*SG1J*VECTOR_WIDTH + 0]; 
    rB[1*VECTOR_WIDTH+1+TT1J] = localReadB[1*SG1J*VECTOR_WIDTH + 1]; 
    rB[2*VECTOR_WIDTH+0+TT1J] = localReadB[2*SG1J*VECTOR_WIDTH + 0]; 
    rB[2*VECTOR_WIDTH+1+TT1J] = localReadB[2*SG1J*VECTOR_WIDTH + 1]; 

/* local write A */
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wconditional-uninitialized"
    *(localWriteA_0_0_0_0 + 0) = a_0_0_0_0;
    *(localWriteA_0_0_0_0 + 1) = a_0_1_0_0;
    *(localWriteA_0_0_1_0 + 0) = a_0_0_1_0;
    *(localWriteA_0_0_1_0 + 1) = a_0_1_1_0;
    *(localWriteA_0_0_2_0 + 0) = a_0_0_2_0;
    *(localWriteA_0_0_2_0 + 1) = a_0_1_2_0;
    *(localWriteA_0_0_3_0 + 0) = a_0_0_3_0;
    *(localWriteA_0_0_3_0 + 1) = a_0_1_3_0;
#pragma clang diagnostic pop

/* local write B */
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wconditional-uninitialized"
    *(localWriteB_0_0_0_0 + 0) = b_0_0_0_0;
    *(localWriteB_0_0_0_1 + 0) = b_0_1_0_0;
    *(localWriteB_0_0_1_0 + 0) = b_0_0_1_0;
    *(localWriteB_0_0_1_1 + 0) = b_0_1_1_0;
    *(localWriteB_0_0_2_0 + 0) = b_0_0_2_0;
    *(localWriteB_0_0_2_1 + 0) = b_0_1_2_0;
#pragma clang diagnostic pop

    /* local write swap offsets a */
    localWriteOffsetA_0_0_0_0 = (localWriteOffsetA_0_0_0_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_1_0 = (localWriteOffsetA_0_0_1_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_2_0 = (localWriteOffsetA_0_0_2_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_3_0 = (localWriteOffsetA_0_0_3_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);

    /* local write swap offsets b */
    localWriteOffsetB_0_0_0_0 = (localWriteOffsetB_0_0_0_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetB_0_0_0_1 = (localWriteOffsetB_0_0_0_1 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetB_0_0_1_0 = (localWriteOffsetB_0_0_1_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetB_0_0_1_1 = (localWriteOffsetB_0_0_1_1 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetB_0_0_2_0 = (localWriteOffsetB_0_0_2_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetB_0_0_2_1 = (localWriteOffsetB_0_0_2_1 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);

    /* local write init pointers A */
    localWriteA_0_0_0_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_0_0);
    localWriteA_0_0_1_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_1_0);
    localWriteA_0_0_2_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_2_0);
    localWriteA_0_0_3_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_3_0);

    /* local write init pointers B */
    localWriteB_0_0_0_0 = (DATA_TYPE *)(localMemory + localWriteOffsetB_0_0_0_0);
    localWriteB_0_0_0_1 = (DATA_TYPE *)(localMemory + localWriteOffsetB_0_0_0_1);
    localWriteB_0_0_1_0 = (DATA_TYPE *)(localMemory + localWriteOffsetB_0_0_1_0);
    localWriteB_0_0_1_1 = (DATA_TYPE *)(localMemory + localWriteOffsetB_0_0_1_1);
    localWriteB_0_0_2_0 = (DATA_TYPE *)(localMemory + localWriteOffsetB_0_0_2_0);
    localWriteB_0_0_2_1 = (DATA_TYPE *)(localMemory + localWriteOffsetB_0_0_2_1);

    /* local read swap offsets a */
    localReadOffsetA = (localReadOffsetA + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);

    /* local read swap offsets b */
    localReadOffsetB = (localReadOffsetB + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);

    /* local read init pointers a */
    localReadA = (DATA_TYPE *)(localMemory + localReadOffsetA);

    /* local read init pointers b */
    localReadB = (DATA_TYPE *)(localMemory + localReadOffsetB);
    MAC_4x6


    /* iter 15 */

    __syncthreads(); //

    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 
    rA[0*VECTOR_WIDTH+1] = localReadA[0*SG0I*VECTOR_WIDTH + 1]; 
    rA[1*VECTOR_WIDTH+0] = localReadA[1*SG0I*VECTOR_WIDTH + 0]; 
    rA[1*VECTOR_WIDTH+1] = localReadA[1*SG0I*VECTOR_WIDTH + 1]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 
    rB[0*VECTOR_WIDTH+1] = localReadB[0*SG1J*VECTOR_WIDTH + 1]; 
    rB[1*VECTOR_WIDTH+0] = localReadB[1*SG1J*VECTOR_WIDTH + 0]; 
    rB[1*VECTOR_WIDTH+1] = localReadB[1*SG1J*VECTOR_WIDTH + 1]; 
    rB[2*VECTOR_WIDTH+0] = localReadB[2*SG1J*VECTOR_WIDTH + 0]; 
    rB[2*VECTOR_WIDTH+1] = localReadB[2*SG1J*VECTOR_WIDTH + 1]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_4x6_BLK




    /******************************************/
    /* Unrolled Loop - End                    */
    /******************************************/

  }


  /* Before NLL: Check VGPR.checkin for INT8 LW */


  /******************************************/
  /* Ord. NoLoadLoop - Begin                                      */
  /******************************************/

  if (sizeK >= LOCAL_DEPTHU) {



    /* iter 0 (last unrolled loop) */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 
    rA[0*VECTOR_WIDTH+1+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 1]; 
    rA[1*VECTOR_WIDTH+0+TT0I] = localReadA[1*SG0I*VECTOR_WIDTH + 0]; 
    rA[1*VECTOR_WIDTH+1+TT0I] = localReadA[1*SG0I*VECTOR_WIDTH + 1]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 
    rB[0*VECTOR_WIDTH+1+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 1]; 
    rB[1*VECTOR_WIDTH+0+TT1J] = localReadB[1*SG1J*VECTOR_WIDTH + 0]; 
    rB[1*VECTOR_WIDTH+1+TT1J] = localReadB[1*SG1J*VECTOR_WIDTH + 1]; 
    rB[2*VECTOR_WIDTH+0+TT1J] = localReadB[2*SG1J*VECTOR_WIDTH + 0]; 
    rB[2*VECTOR_WIDTH+1+TT1J] = localReadB[2*SG1J*VECTOR_WIDTH + 1]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_4x6


    /* iter 1 (last unrolled loop) */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 
    rA[0*VECTOR_WIDTH+1] = localReadA[0*SG0I*VECTOR_WIDTH + 1]; 
    rA[1*VECTOR_WIDTH+0] = localReadA[1*SG0I*VECTOR_WIDTH + 0]; 
    rA[1*VECTOR_WIDTH+1] = localReadA[1*SG0I*VECTOR_WIDTH + 1]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 
    rB[0*VECTOR_WIDTH+1] = localReadB[0*SG1J*VECTOR_WIDTH + 1]; 
    rB[1*VECTOR_WIDTH+0] = localReadB[1*SG1J*VECTOR_WIDTH + 0]; 
    rB[1*VECTOR_WIDTH+1] = localReadB[1*SG1J*VECTOR_WIDTH + 1]; 
    rB[2*VECTOR_WIDTH+0] = localReadB[2*SG1J*VECTOR_WIDTH + 0]; 
    rB[2*VECTOR_WIDTH+1] = localReadB[2*SG1J*VECTOR_WIDTH + 1]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_4x6_BLK


    /* iter 2 (last unrolled loop) */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 
    rA[0*VECTOR_WIDTH+1+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 1]; 
    rA[1*VECTOR_WIDTH+0+TT0I] = localReadA[1*SG0I*VECTOR_WIDTH + 0]; 
    rA[1*VECTOR_WIDTH+1+TT0I] = localReadA[1*SG0I*VECTOR_WIDTH + 1]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 
    rB[0*VECTOR_WIDTH+1+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 1]; 
    rB[1*VECTOR_WIDTH+0+TT1J] = localReadB[1*SG1J*VECTOR_WIDTH + 0]; 
    rB[1*VECTOR_WIDTH+1+TT1J] = localReadB[1*SG1J*VECTOR_WIDTH + 1]; 
    rB[2*VECTOR_WIDTH+0+TT1J] = localReadB[2*SG1J*VECTOR_WIDTH + 0]; 
    rB[2*VECTOR_WIDTH+1+TT1J] = localReadB[2*SG1J*VECTOR_WIDTH + 1]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_4x6


    /* iter 3 (last unrolled loop) */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 
    rA[0*VECTOR_WIDTH+1] = localReadA[0*SG0I*VECTOR_WIDTH + 1]; 
    rA[1*VECTOR_WIDTH+0] = localReadA[1*SG0I*VECTOR_WIDTH + 0]; 
    rA[1*VECTOR_WIDTH+1] = localReadA[1*SG0I*VECTOR_WIDTH + 1]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 
    rB[0*VECTOR_WIDTH+1] = localReadB[0*SG1J*VECTOR_WIDTH + 1]; 
    rB[1*VECTOR_WIDTH+0] = localReadB[1*SG1J*VECTOR_WIDTH + 0]; 
    rB[1*VECTOR_WIDTH+1] = localReadB[1*SG1J*VECTOR_WIDTH + 1]; 
    rB[2*VECTOR_WIDTH+0] = localReadB[2*SG1J*VECTOR_WIDTH + 0]; 
    rB[2*VECTOR_WIDTH+1] = localReadB[2*SG1J*VECTOR_WIDTH + 1]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_4x6_BLK


    /* iter 4 (last unrolled loop) */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 
    rA[0*VECTOR_WIDTH+1+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 1]; 
    rA[1*VECTOR_WIDTH+0+TT0I] = localReadA[1*SG0I*VECTOR_WIDTH + 0]; 
    rA[1*VECTOR_WIDTH+1+TT0I] = localReadA[1*SG0I*VECTOR_WIDTH + 1]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 
    rB[0*VECTOR_WIDTH+1+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 1]; 
    rB[1*VECTOR_WIDTH+0+TT1J] = localReadB[1*SG1J*VECTOR_WIDTH + 0]; 
    rB[1*VECTOR_WIDTH+1+TT1J] = localReadB[1*SG1J*VECTOR_WIDTH + 1]; 
    rB[2*VECTOR_WIDTH+0+TT1J] = localReadB[2*SG1J*VECTOR_WIDTH + 0]; 
    rB[2*VECTOR_WIDTH+1+TT1J] = localReadB[2*SG1J*VECTOR_WIDTH + 1]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_4x6


    /* iter 5 (last unrolled loop) */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 
    rA[0*VECTOR_WIDTH+1] = localReadA[0*SG0I*VECTOR_WIDTH + 1]; 
    rA[1*VECTOR_WIDTH+0] = localReadA[1*SG0I*VECTOR_WIDTH + 0]; 
    rA[1*VECTOR_WIDTH+1] = localReadA[1*SG0I*VECTOR_WIDTH + 1]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 
    rB[0*VECTOR_WIDTH+1] = localReadB[0*SG1J*VECTOR_WIDTH + 1]; 
    rB[1*VECTOR_WIDTH+0] = localReadB[1*SG1J*VECTOR_WIDTH + 0]; 
    rB[1*VECTOR_WIDTH+1] = localReadB[1*SG1J*VECTOR_WIDTH + 1]; 
    rB[2*VECTOR_WIDTH+0] = localReadB[2*SG1J*VECTOR_WIDTH + 0]; 
    rB[2*VECTOR_WIDTH+1] = localReadB[2*SG1J*VECTOR_WIDTH + 1]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_4x6_BLK


    /* iter 6 (last unrolled loop) */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 
    rA[0*VECTOR_WIDTH+1+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 1]; 
    rA[1*VECTOR_WIDTH+0+TT0I] = localReadA[1*SG0I*VECTOR_WIDTH + 0]; 
    rA[1*VECTOR_WIDTH+1+TT0I] = localReadA[1*SG0I*VECTOR_WIDTH + 1]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 
    rB[0*VECTOR_WIDTH+1+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 1]; 
    rB[1*VECTOR_WIDTH+0+TT1J] = localReadB[1*SG1J*VECTOR_WIDTH + 0]; 
    rB[1*VECTOR_WIDTH+1+TT1J] = localReadB[1*SG1J*VECTOR_WIDTH + 1]; 
    rB[2*VECTOR_WIDTH+0+TT1J] = localReadB[2*SG1J*VECTOR_WIDTH + 0]; 
    rB[2*VECTOR_WIDTH+1+TT1J] = localReadB[2*SG1J*VECTOR_WIDTH + 1]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_4x6


    /* iter 7 (last unrolled loop) */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 
    rA[0*VECTOR_WIDTH+1] = localReadA[0*SG0I*VECTOR_WIDTH + 1]; 
    rA[1*VECTOR_WIDTH+0] = localReadA[1*SG0I*VECTOR_WIDTH + 0]; 
    rA[1*VECTOR_WIDTH+1] = localReadA[1*SG0I*VECTOR_WIDTH + 1]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 
    rB[0*VECTOR_WIDTH+1] = localReadB[0*SG1J*VECTOR_WIDTH + 1]; 
    rB[1*VECTOR_WIDTH+0] = localReadB[1*SG1J*VECTOR_WIDTH + 0]; 
    rB[1*VECTOR_WIDTH+1] = localReadB[1*SG1J*VECTOR_WIDTH + 1]; 
    rB[2*VECTOR_WIDTH+0] = localReadB[2*SG1J*VECTOR_WIDTH + 0]; 
    rB[2*VECTOR_WIDTH+1] = localReadB[2*SG1J*VECTOR_WIDTH + 1]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_4x6_BLK


    /* iter 8 (last unrolled loop) */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 
    rA[0*VECTOR_WIDTH+1+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 1]; 
    rA[1*VECTOR_WIDTH+0+TT0I] = localReadA[1*SG0I*VECTOR_WIDTH + 0]; 
    rA[1*VECTOR_WIDTH+1+TT0I] = localReadA[1*SG0I*VECTOR_WIDTH + 1]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 
    rB[0*VECTOR_WIDTH+1+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 1]; 
    rB[1*VECTOR_WIDTH+0+TT1J] = localReadB[1*SG1J*VECTOR_WIDTH + 0]; 
    rB[1*VECTOR_WIDTH+1+TT1J] = localReadB[1*SG1J*VECTOR_WIDTH + 1]; 
    rB[2*VECTOR_WIDTH+0+TT1J] = localReadB[2*SG1J*VECTOR_WIDTH + 0]; 
    rB[2*VECTOR_WIDTH+1+TT1J] = localReadB[2*SG1J*VECTOR_WIDTH + 1]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_4x6


    /* iter 9 (last unrolled loop) */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 
    rA[0*VECTOR_WIDTH+1] = localReadA[0*SG0I*VECTOR_WIDTH + 1]; 
    rA[1*VECTOR_WIDTH+0] = localReadA[1*SG0I*VECTOR_WIDTH + 0]; 
    rA[1*VECTOR_WIDTH+1] = localReadA[1*SG0I*VECTOR_WIDTH + 1]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 
    rB[0*VECTOR_WIDTH+1] = localReadB[0*SG1J*VECTOR_WIDTH + 1]; 
    rB[1*VECTOR_WIDTH+0] = localReadB[1*SG1J*VECTOR_WIDTH + 0]; 
    rB[1*VECTOR_WIDTH+1] = localReadB[1*SG1J*VECTOR_WIDTH + 1]; 
    rB[2*VECTOR_WIDTH+0] = localReadB[2*SG1J*VECTOR_WIDTH + 0]; 
    rB[2*VECTOR_WIDTH+1] = localReadB[2*SG1J*VECTOR_WIDTH + 1]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_4x6_BLK


    /* iter 10 (last unrolled loop) */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 
    rA[0*VECTOR_WIDTH+1+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 1]; 
    rA[1*VECTOR_WIDTH+0+TT0I] = localReadA[1*SG0I*VECTOR_WIDTH + 0]; 
    rA[1*VECTOR_WIDTH+1+TT0I] = localReadA[1*SG0I*VECTOR_WIDTH + 1]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 
    rB[0*VECTOR_WIDTH+1+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 1]; 
    rB[1*VECTOR_WIDTH+0+TT1J] = localReadB[1*SG1J*VECTOR_WIDTH + 0]; 
    rB[1*VECTOR_WIDTH+1+TT1J] = localReadB[1*SG1J*VECTOR_WIDTH + 1]; 
    rB[2*VECTOR_WIDTH+0+TT1J] = localReadB[2*SG1J*VECTOR_WIDTH + 0]; 
    rB[2*VECTOR_WIDTH+1+TT1J] = localReadB[2*SG1J*VECTOR_WIDTH + 1]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_4x6


    /* iter 11 (last unrolled loop) */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 
    rA[0*VECTOR_WIDTH+1] = localReadA[0*SG0I*VECTOR_WIDTH + 1]; 
    rA[1*VECTOR_WIDTH+0] = localReadA[1*SG0I*VECTOR_WIDTH + 0]; 
    rA[1*VECTOR_WIDTH+1] = localReadA[1*SG0I*VECTOR_WIDTH + 1]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 
    rB[0*VECTOR_WIDTH+1] = localReadB[0*SG1J*VECTOR_WIDTH + 1]; 
    rB[1*VECTOR_WIDTH+0] = localReadB[1*SG1J*VECTOR_WIDTH + 0]; 
    rB[1*VECTOR_WIDTH+1] = localReadB[1*SG1J*VECTOR_WIDTH + 1]; 
    rB[2*VECTOR_WIDTH+0] = localReadB[2*SG1J*VECTOR_WIDTH + 0]; 
    rB[2*VECTOR_WIDTH+1] = localReadB[2*SG1J*VECTOR_WIDTH + 1]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_4x6_BLK


    //  
    /* iter 12 (last unrolled loop) */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 
    rA[0*VECTOR_WIDTH+1+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 1]; 
    rA[1*VECTOR_WIDTH+0+TT0I] = localReadA[1*SG0I*VECTOR_WIDTH + 0]; 
    rA[1*VECTOR_WIDTH+1+TT0I] = localReadA[1*SG0I*VECTOR_WIDTH + 1]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 
    rB[0*VECTOR_WIDTH+1+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 1]; 
    rB[1*VECTOR_WIDTH+0+TT1J] = localReadB[1*SG1J*VECTOR_WIDTH + 0]; 
    rB[1*VECTOR_WIDTH+1+TT1J] = localReadB[1*SG1J*VECTOR_WIDTH + 1]; 
    rB[2*VECTOR_WIDTH+0+TT1J] = localReadB[2*SG1J*VECTOR_WIDTH + 0]; 
    rB[2*VECTOR_WIDTH+1+TT1J] = localReadB[2*SG1J*VECTOR_WIDTH + 1]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_4x6


    /* iter 13 (last unrolled loop) */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 
    rA[0*VECTOR_WIDTH+1] = localReadA[0*SG0I*VECTOR_WIDTH + 1]; 
    rA[1*VECTOR_WIDTH+0] = localReadA[1*SG0I*VECTOR_WIDTH + 0]; 
    rA[1*VECTOR_WIDTH+1] = localReadA[1*SG0I*VECTOR_WIDTH + 1]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 
    rB[0*VECTOR_WIDTH+1] = localReadB[0*SG1J*VECTOR_WIDTH + 1]; 
    rB[1*VECTOR_WIDTH+0] = localReadB[1*SG1J*VECTOR_WIDTH + 0]; 
    rB[1*VECTOR_WIDTH+1] = localReadB[1*SG1J*VECTOR_WIDTH + 1]; 
    rB[2*VECTOR_WIDTH+0] = localReadB[2*SG1J*VECTOR_WIDTH + 0]; 
    rB[2*VECTOR_WIDTH+1] = localReadB[2*SG1J*VECTOR_WIDTH + 1]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_4x6_BLK


    /* iter 14 (last unrolled loop) */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 
    rA[0*VECTOR_WIDTH+1+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 1]; 
    rA[1*VECTOR_WIDTH+0+TT0I] = localReadA[1*SG0I*VECTOR_WIDTH + 0]; 
    rA[1*VECTOR_WIDTH+1+TT0I] = localReadA[1*SG0I*VECTOR_WIDTH + 1]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 
    rB[0*VECTOR_WIDTH+1+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 1]; 
    rB[1*VECTOR_WIDTH+0+TT1J] = localReadB[1*SG1J*VECTOR_WIDTH + 0]; 
    rB[1*VECTOR_WIDTH+1+TT1J] = localReadB[1*SG1J*VECTOR_WIDTH + 1]; 
    rB[2*VECTOR_WIDTH+0+TT1J] = localReadB[2*SG1J*VECTOR_WIDTH + 0]; 
    rB[2*VECTOR_WIDTH+1+TT1J] = localReadB[2*SG1J*VECTOR_WIDTH + 1]; 

/* local write A */

/* local write B */
    MAC_4x6


    /* iter 15 (last unrolled loop) */

    MAC_4x6_BLK

  } // end unroll


  /******************************************/
  /* Tail Loop                              */
  /******************************************/


  /* local write reset offsets a */

  localWriteOffsetA_0_0_0_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_1_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_2_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_3_0 %= LDS_OFFSET_BLK;


  /* local write reset offsets b */

  localWriteOffsetB_0_0_0_0 %= LDS_OFFSET_BLK;
  localWriteOffsetB_0_0_0_1 %= LDS_OFFSET_BLK;
  localWriteOffsetB_0_0_1_0 %= LDS_OFFSET_BLK;
  localWriteOffsetB_0_0_1_1 %= LDS_OFFSET_BLK;
  localWriteOffsetB_0_0_2_0 %= LDS_OFFSET_BLK;
  localWriteOffsetB_0_0_2_1 %= LDS_OFFSET_BLK;


  /* Compute tail loop num iter */
  numIterK = (((sizeK % LOCAL_DEPTHU) + LOCAL_SPLITU - 1) / LOCAL_SPLITU);


  /* remove stagger offsets for tail loop */

  globalReadA_0_0_0_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAK); // remove stagger offset
  globalReadA_0_0_1_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAK); // remove stagger offset
  globalReadA_0_0_2_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAK); // remove stagger offset
  globalReadA_0_0_3_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAK); // remove stagger offset

  globalReadB_0_0_0_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncBK); // remove stagger offset
  globalReadB_0_0_1_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncBK); // remove stagger offset
  globalReadB_0_0_2_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncBK); // remove stagger offset


  /* Update M0 for DTLDS */



  /* global read a */


  /* global read A */
  a_0_0_0_0 = ( globalReadOffsetAK_0_0  + 0 >= (sizeK % LOCAL_DEPTHU) ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_0_0 + 0);
  a_0_1_0_0 = ( globalReadOffsetAK_0_0  + 0 >= (sizeK % LOCAL_DEPTHU) ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_0_0 + 1);
  a_0_0_1_0 = ( globalReadOffsetAK_1_0  + 0 >= (sizeK % LOCAL_DEPTHU) ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_1_0 + 0);
  a_0_1_1_0 = ( globalReadOffsetAK_1_0  + 0 >= (sizeK % LOCAL_DEPTHU) ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_1_0 + 1);
  a_0_0_2_0 = ( globalReadOffsetAK_2_0  + 0 >= (sizeK % LOCAL_DEPTHU) ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_2_0 + 0);
  a_0_1_2_0 = ( globalReadOffsetAK_2_0  + 0 >= (sizeK % LOCAL_DEPTHU) ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_2_0 + 1);
  a_0_0_3_0 = ( globalReadOffsetAK_3_0  + 0 >= (sizeK % LOCAL_DEPTHU) ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_3_0 + 0);
  a_0_1_3_0 = ( globalReadOffsetAK_3_0  + 0 >= (sizeK % LOCAL_DEPTHU) ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_3_0 + 1);


  /* Update M0 for DTLDS */



  /* global read b */


  /* global read B */
  b_0_0_0_0 = ( globalReadOffsetBK_0_0  + 0 >= (sizeK % LOCAL_DEPTHU) ) ? SCALAR_OOB_DATA : *(globalReadB_0_0_0_0 + 0);
  b_0_1_0_0 = ( globalReadOffsetBK_0_0  + 1 >= (sizeK % LOCAL_DEPTHU) ) ? SCALAR_OOB_DATA : *(globalReadB_0_0_0_0 + 1);
  b_0_0_1_0 = ( globalReadOffsetBK_0_0  + 0 >= (sizeK % LOCAL_DEPTHU) ) ? SCALAR_OOB_DATA : *(globalReadB_0_0_1_0 + 0);
  b_0_1_1_0 = ( globalReadOffsetBK_0_0  + 1 >= (sizeK % LOCAL_DEPTHU) ) ? SCALAR_OOB_DATA : *(globalReadB_0_0_1_0 + 1);
  b_0_0_2_0 = ( globalReadOffsetBK_0_0  + 0 >= (sizeK % LOCAL_DEPTHU) ) ? SCALAR_OOB_DATA : *(globalReadB_0_0_2_0 + 0);
  b_0_1_2_0 = ( globalReadOffsetBK_0_0  + 1 >= (sizeK % LOCAL_DEPTHU) ) ? SCALAR_OOB_DATA : *(globalReadB_0_0_2_0 + 1);


  __syncthreads(); //



  /* local write init pointers A */
  localWriteA_0_0_0_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_0_0);
  localWriteA_0_0_1_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_1_0);
  localWriteA_0_0_2_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_2_0);
  localWriteA_0_0_3_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_3_0);


  /* local write init pointers B */
  localWriteB_0_0_0_0 = (DATA_TYPE *)(localMemory + localWriteOffsetB_0_0_0_0);
  localWriteB_0_0_0_1 = (DATA_TYPE *)(localMemory + localWriteOffsetB_0_0_0_1);
  localWriteB_0_0_1_0 = (DATA_TYPE *)(localMemory + localWriteOffsetB_0_0_1_0);
  localWriteB_0_0_1_1 = (DATA_TYPE *)(localMemory + localWriteOffsetB_0_0_1_1);
  localWriteB_0_0_2_0 = (DATA_TYPE *)(localMemory + localWriteOffsetB_0_0_2_0);
  localWriteB_0_0_2_1 = (DATA_TYPE *)(localMemory + localWriteOffsetB_0_0_2_1);


  /* local write a */

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wconditional-uninitialized"
  *(localWriteA_0_0_0_0 + 0) = a_0_0_0_0;
  *(localWriteA_0_0_0_0 + 1) = a_0_1_0_0;
  *(localWriteA_0_0_1_0 + 0) = a_0_0_1_0;
  *(localWriteA_0_0_1_0 + 1) = a_0_1_1_0;
  *(localWriteA_0_0_2_0 + 0) = a_0_0_2_0;
  *(localWriteA_0_0_2_0 + 1) = a_0_1_2_0;
  *(localWriteA_0_0_3_0 + 0) = a_0_0_3_0;
  *(localWriteA_0_0_3_0 + 1) = a_0_1_3_0;
#pragma clang diagnostic pop


  /* local write b */

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wconditional-uninitialized"
  *(localWriteB_0_0_0_0 + 0) = b_0_0_0_0;
  *(localWriteB_0_0_0_1 + 0) = b_0_1_0_0;
  *(localWriteB_0_0_1_0 + 0) = b_0_0_1_0;
  *(localWriteB_0_0_1_1 + 0) = b_0_1_1_0;
  *(localWriteB_0_0_2_0 + 0) = b_0_0_2_0;
  *(localWriteB_0_0_2_1 + 0) = b_0_1_2_0;
#pragma clang diagnostic pop


  /* Recalc local read offsets */



  __syncthreads(); //


  /* local read reset offsets a */

  localReadOffsetA %= LDS_OFFSET_BLK;


  /* local read reset offsets b */

  localReadOffsetB %= LDS_OFFSET_BLK;


  /* local read init pointers a */

  localReadA = (DATA_TYPE *)(localMemory + localReadOffsetA);


  /* local read init pointers b */

  localReadB = (DATA_TYPE *)(localMemory + localReadOffsetB);


  /* tail loop: macs */

  while (numIterK-- > 0) {


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 
    rA[0*VECTOR_WIDTH+1] = localReadA[0*SG0I*VECTOR_WIDTH + 1]; 
    rA[1*VECTOR_WIDTH+0] = localReadA[1*SG0I*VECTOR_WIDTH + 0]; 
    rA[1*VECTOR_WIDTH+1] = localReadA[1*SG0I*VECTOR_WIDTH + 1]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 
    rB[0*VECTOR_WIDTH+1] = localReadB[0*SG1J*VECTOR_WIDTH + 1]; 
    rB[1*VECTOR_WIDTH+0] = localReadB[1*SG1J*VECTOR_WIDTH + 0]; 
    rB[1*VECTOR_WIDTH+1] = localReadB[1*SG1J*VECTOR_WIDTH + 1]; 
    rB[2*VECTOR_WIDTH+0] = localReadB[2*SG1J*VECTOR_WIDTH + 0]; 
    rB[2*VECTOR_WIDTH+1] = localReadB[2*SG1J*VECTOR_WIDTH + 1]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_4x6

  }





  /******************************************/
  /* LocalSplitU Reduction                  */
  /******************************************/

  __syncthreads(); //


  /* LocalSplitU: local write */

  COMPUTE_DATA_TYPE *localLocalSplitU = (COMPUTE_DATA_TYPE *)(localMemory);
  localLocalSplitU[0 + (lr0I + 0*SG0I + (MT0I/VECTOR_WIDTH)*(lr1J*VECTOR_WIDTH + 0 + SG1J*VECTOR_WIDTH*0) + (MT0I*MT1J/VECTOR_WIDTH)*sgId)*VECTOR_WIDTH] = rC[0 + (0+0*(TT0I/VECTOR_WIDTH)+0*TT0I)*VECTOR_WIDTH];
  localLocalSplitU[1 + (lr0I + 0*SG0I + (MT0I/VECTOR_WIDTH)*(lr1J*VECTOR_WIDTH + 0 + SG1J*VECTOR_WIDTH*0) + (MT0I*MT1J/VECTOR_WIDTH)*sgId)*VECTOR_WIDTH] = rC[1 + (0+0*(TT0I/VECTOR_WIDTH)+0*TT0I)*VECTOR_WIDTH];
  localLocalSplitU[0 + (lr0I + 0*SG0I + (MT0I/VECTOR_WIDTH)*(lr1J*VECTOR_WIDTH + 1 + SG1J*VECTOR_WIDTH*0) + (MT0I*MT1J/VECTOR_WIDTH)*sgId)*VECTOR_WIDTH] = rC[0 + (0+1*(TT0I/VECTOR_WIDTH)+0*TT0I)*VECTOR_WIDTH];
  localLocalSplitU[1 + (lr0I + 0*SG0I + (MT0I/VECTOR_WIDTH)*(lr1J*VECTOR_WIDTH + 1 + SG1J*VECTOR_WIDTH*0) + (MT0I*MT1J/VECTOR_WIDTH)*sgId)*VECTOR_WIDTH] = rC[1 + (0+1*(TT0I/VECTOR_WIDTH)+0*TT0I)*VECTOR_WIDTH];
  localLocalSplitU[0 + (lr0I + 1*SG0I + (MT0I/VECTOR_WIDTH)*(lr1J*VECTOR_WIDTH + 0 + SG1J*VECTOR_WIDTH*0) + (MT0I*MT1J/VECTOR_WIDTH)*sgId)*VECTOR_WIDTH] = rC[0 + (1+0*(TT0I/VECTOR_WIDTH)+0*TT0I)*VECTOR_WIDTH];
  localLocalSplitU[1 + (lr0I + 1*SG0I + (MT0I/VECTOR_WIDTH)*(lr1J*VECTOR_WIDTH + 0 + SG1J*VECTOR_WIDTH*0) + (MT0I*MT1J/VECTOR_WIDTH)*sgId)*VECTOR_WIDTH] = rC[1 + (1+0*(TT0I/VECTOR_WIDTH)+0*TT0I)*VECTOR_WIDTH];
  localLocalSplitU[0 + (lr0I + 1*SG0I + (MT0I/VECTOR_WIDTH)*(lr1J*VECTOR_WIDTH + 1 + SG1J*VECTOR_WIDTH*0) + (MT0I*MT1J/VECTOR_WIDTH)*sgId)*VECTOR_WIDTH] = rC[0 + (1+1*(TT0I/VECTOR_WIDTH)+0*TT0I)*VECTOR_WIDTH];
  localLocalSplitU[1 + (lr0I + 1*SG0I + (MT0I/VECTOR_WIDTH)*(lr1J*VECTOR_WIDTH + 1 + SG1J*VECTOR_WIDTH*0) + (MT0I*MT1J/VECTOR_WIDTH)*sgId)*VECTOR_WIDTH] = rC[1 + (1+1*(TT0I/VECTOR_WIDTH)+0*TT0I)*VECTOR_WIDTH];
  localLocalSplitU[0 + (lr0I + 0*SG0I + (MT0I/VECTOR_WIDTH)*(lr1J*VECTOR_WIDTH + 0 + SG1J*VECTOR_WIDTH*1) + (MT0I*MT1J/VECTOR_WIDTH)*sgId)*VECTOR_WIDTH] = rC[0 + (0+0*(TT0I/VECTOR_WIDTH)+1*TT0I)*VECTOR_WIDTH];
  localLocalSplitU[1 + (lr0I + 0*SG0I + (MT0I/VECTOR_WIDTH)*(lr1J*VECTOR_WIDTH + 0 + SG1J*VECTOR_WIDTH*1) + (MT0I*MT1J/VECTOR_WIDTH)*sgId)*VECTOR_WIDTH] = rC[1 + (0+0*(TT0I/VECTOR_WIDTH)+1*TT0I)*VECTOR_WIDTH];
  localLocalSplitU[0 + (lr0I + 0*SG0I + (MT0I/VECTOR_WIDTH)*(lr1J*VECTOR_WIDTH + 1 + SG1J*VECTOR_WIDTH*1) + (MT0I*MT1J/VECTOR_WIDTH)*sgId)*VECTOR_WIDTH] = rC[0 + (0+1*(TT0I/VECTOR_WIDTH)+1*TT0I)*VECTOR_WIDTH];
  localLocalSplitU[1 + (lr0I + 0*SG0I + (MT0I/VECTOR_WIDTH)*(lr1J*VECTOR_WIDTH + 1 + SG1J*VECTOR_WIDTH*1) + (MT0I*MT1J/VECTOR_WIDTH)*sgId)*VECTOR_WIDTH] = rC[1 + (0+1*(TT0I/VECTOR_WIDTH)+1*TT0I)*VECTOR_WIDTH];
  localLocalSplitU[0 + (lr0I + 1*SG0I + (MT0I/VECTOR_WIDTH)*(lr1J*VECTOR_WIDTH + 0 + SG1J*VECTOR_WIDTH*1) + (MT0I*MT1J/VECTOR_WIDTH)*sgId)*VECTOR_WIDTH] = rC[0 + (1+0*(TT0I/VECTOR_WIDTH)+1*TT0I)*VECTOR_WIDTH];
  localLocalSplitU[1 + (lr0I + 1*SG0I + (MT0I/VECTOR_WIDTH)*(lr1J*VECTOR_WIDTH + 0 + SG1J*VECTOR_WIDTH*1) + (MT0I*MT1J/VECTOR_WIDTH)*sgId)*VECTOR_WIDTH] = rC[1 + (1+0*(TT0I/VECTOR_WIDTH)+1*TT0I)*VECTOR_WIDTH];
  localLocalSplitU[0 + (lr0I + 1*SG0I + (MT0I/VECTOR_WIDTH)*(lr1J*VECTOR_WIDTH + 1 + SG1J*VECTOR_WIDTH*1) + (MT0I*MT1J/VECTOR_WIDTH)*sgId)*VECTOR_WIDTH] = rC[0 + (1+1*(TT0I/VECTOR_WIDTH)+1*TT0I)*VECTOR_WIDTH];
  localLocalSplitU[1 + (lr0I + 1*SG0I + (MT0I/VECTOR_WIDTH)*(lr1J*VECTOR_WIDTH + 1 + SG1J*VECTOR_WIDTH*1) + (MT0I*MT1J/VECTOR_WIDTH)*sgId)*VECTOR_WIDTH] = rC[1 + (1+1*(TT0I/VECTOR_WIDTH)+1*TT0I)*VECTOR_WIDTH];
  localLocalSplitU[0 + (lr0I + 0*SG0I + (MT0I/VECTOR_WIDTH)*(lr1J*VECTOR_WIDTH + 0 + SG1J*VECTOR_WIDTH*2) + (MT0I*MT1J/VECTOR_WIDTH)*sgId)*VECTOR_WIDTH] = rC[0 + (0+0*(TT0I/VECTOR_WIDTH)+2*TT0I)*VECTOR_WIDTH];
  localLocalSplitU[1 + (lr0I + 0*SG0I + (MT0I/VECTOR_WIDTH)*(lr1J*VECTOR_WIDTH + 0 + SG1J*VECTOR_WIDTH*2) + (MT0I*MT1J/VECTOR_WIDTH)*sgId)*VECTOR_WIDTH] = rC[1 + (0+0*(TT0I/VECTOR_WIDTH)+2*TT0I)*VECTOR_WIDTH];
  localLocalSplitU[0 + (lr0I + 0*SG0I + (MT0I/VECTOR_WIDTH)*(lr1J*VECTOR_WIDTH + 1 + SG1J*VECTOR_WIDTH*2) + (MT0I*MT1J/VECTOR_WIDTH)*sgId)*VECTOR_WIDTH] = rC[0 + (0+1*(TT0I/VECTOR_WIDTH)+2*TT0I)*VECTOR_WIDTH];
  localLocalSplitU[1 + (lr0I + 0*SG0I + (MT0I/VECTOR_WIDTH)*(lr1J*VECTOR_WIDTH + 1 + SG1J*VECTOR_WIDTH*2) + (MT0I*MT1J/VECTOR_WIDTH)*sgId)*VECTOR_WIDTH] = rC[1 + (0+1*(TT0I/VECTOR_WIDTH)+2*TT0I)*VECTOR_WIDTH];
  localLocalSplitU[0 + (lr0I + 1*SG0I + (MT0I/VECTOR_WIDTH)*(lr1J*VECTOR_WIDTH + 0 + SG1J*VECTOR_WIDTH*2) + (MT0I*MT1J/VECTOR_WIDTH)*sgId)*VECTOR_WIDTH] = rC[0 + (1+0*(TT0I/VECTOR_WIDTH)+2*TT0I)*VECTOR_WIDTH];
  localLocalSplitU[1 + (lr0I + 1*SG0I + (MT0I/VECTOR_WIDTH)*(lr1J*VECTOR_WIDTH + 0 + SG1J*VECTOR_WIDTH*2) + (MT0I*MT1J/VECTOR_WIDTH)*sgId)*VECTOR_WIDTH] = rC[1 + (1+0*(TT0I/VECTOR_WIDTH)+2*TT0I)*VECTOR_WIDTH];
  localLocalSplitU[0 + (lr0I + 1*SG0I + (MT0I/VECTOR_WIDTH)*(lr1J*VECTOR_WIDTH + 1 + SG1J*VECTOR_WIDTH*2) + (MT0I*MT1J/VECTOR_WIDTH)*sgId)*VECTOR_WIDTH] = rC[0 + (1+1*(TT0I/VECTOR_WIDTH)+2*TT0I)*VECTOR_WIDTH];
  localLocalSplitU[1 + (lr0I + 1*SG0I + (MT0I/VECTOR_WIDTH)*(lr1J*VECTOR_WIDTH + 1 + SG1J*VECTOR_WIDTH*2) + (MT0I*MT1J/VECTOR_WIDTH)*sgId)*VECTOR_WIDTH] = rC[1 + (1+1*(TT0I/VECTOR_WIDTH)+2*TT0I)*VECTOR_WIDTH];
  __syncthreads(); //


  /* LocalSplitU: local read */

  rC[0 +   0*GLOBAL_WRITE_VECTOR_WIDTH] = localLocalSplitU[0 + (serial+0*NUM_THREADS)*GLOBAL_WRITE_VECTOR_WIDTH];
  rC[1 +   0*GLOBAL_WRITE_VECTOR_WIDTH] = localLocalSplitU[1 + (serial+0*NUM_THREADS)*GLOBAL_WRITE_VECTOR_WIDTH];
  rC[0 +   1*GLOBAL_WRITE_VECTOR_WIDTH] = localLocalSplitU[0 + (serial+1*NUM_THREADS)*GLOBAL_WRITE_VECTOR_WIDTH];
  rC[1 +   1*GLOBAL_WRITE_VECTOR_WIDTH] = localLocalSplitU[1 + (serial+1*NUM_THREADS)*GLOBAL_WRITE_VECTOR_WIDTH];
  rC[0 +   2*GLOBAL_WRITE_VECTOR_WIDTH] = localLocalSplitU[0 + (serial+2*NUM_THREADS)*GLOBAL_WRITE_VECTOR_WIDTH];
  rC[1 +   2*GLOBAL_WRITE_VECTOR_WIDTH] = localLocalSplitU[1 + (serial+2*NUM_THREADS)*GLOBAL_WRITE_VECTOR_WIDTH];
  rC[0 +   3*GLOBAL_WRITE_VECTOR_WIDTH] = localLocalSplitU[0 + (serial+3*NUM_THREADS)*GLOBAL_WRITE_VECTOR_WIDTH];
  rC[1 +   3*GLOBAL_WRITE_VECTOR_WIDTH] = localLocalSplitU[1 + (serial+3*NUM_THREADS)*GLOBAL_WRITE_VECTOR_WIDTH];
  rC[0 +   4*GLOBAL_WRITE_VECTOR_WIDTH] = localLocalSplitU[0 + (serial+4*NUM_THREADS)*GLOBAL_WRITE_VECTOR_WIDTH];
  rC[1 +   4*GLOBAL_WRITE_VECTOR_WIDTH] = localLocalSplitU[1 + (serial+4*NUM_THREADS)*GLOBAL_WRITE_VECTOR_WIDTH];
  rC[0 +   5*GLOBAL_WRITE_VECTOR_WIDTH] = localLocalSplitU[0 + (serial+5*NUM_THREADS)*GLOBAL_WRITE_VECTOR_WIDTH];
  rC[1 +   5*GLOBAL_WRITE_VECTOR_WIDTH] = localLocalSplitU[1 + (serial+5*NUM_THREADS)*GLOBAL_WRITE_VECTOR_WIDTH];



  /* LocalSplitU: reduction */

  rC[0 +   0*GLOBAL_WRITE_VECTOR_WIDTH] += localLocalSplitU[(0 + serial*GLOBAL_WRITE_VECTOR_WIDTH+0*NUM_THREADS*GLOBAL_WRITE_VECTOR_WIDTH + 1*MT0I*MT1J)];
  rC[1 +   0*GLOBAL_WRITE_VECTOR_WIDTH] += localLocalSplitU[(1 + serial*GLOBAL_WRITE_VECTOR_WIDTH+0*NUM_THREADS*GLOBAL_WRITE_VECTOR_WIDTH + 1*MT0I*MT1J)];
  rC[0 +   1*GLOBAL_WRITE_VECTOR_WIDTH] += localLocalSplitU[(0 + serial*GLOBAL_WRITE_VECTOR_WIDTH+1*NUM_THREADS*GLOBAL_WRITE_VECTOR_WIDTH + 1*MT0I*MT1J)];
  rC[1 +   1*GLOBAL_WRITE_VECTOR_WIDTH] += localLocalSplitU[(1 + serial*GLOBAL_WRITE_VECTOR_WIDTH+1*NUM_THREADS*GLOBAL_WRITE_VECTOR_WIDTH + 1*MT0I*MT1J)];
  rC[0 +   2*GLOBAL_WRITE_VECTOR_WIDTH] += localLocalSplitU[(0 + serial*GLOBAL_WRITE_VECTOR_WIDTH+2*NUM_THREADS*GLOBAL_WRITE_VECTOR_WIDTH + 1*MT0I*MT1J)];
  rC[1 +   2*GLOBAL_WRITE_VECTOR_WIDTH] += localLocalSplitU[(1 + serial*GLOBAL_WRITE_VECTOR_WIDTH+2*NUM_THREADS*GLOBAL_WRITE_VECTOR_WIDTH + 1*MT0I*MT1J)];
  rC[0 +   3*GLOBAL_WRITE_VECTOR_WIDTH] += localLocalSplitU[(0 + serial*GLOBAL_WRITE_VECTOR_WIDTH+3*NUM_THREADS*GLOBAL_WRITE_VECTOR_WIDTH + 1*MT0I*MT1J)];
  rC[1 +   3*GLOBAL_WRITE_VECTOR_WIDTH] += localLocalSplitU[(1 + serial*GLOBAL_WRITE_VECTOR_WIDTH+3*NUM_THREADS*GLOBAL_WRITE_VECTOR_WIDTH + 1*MT0I*MT1J)];
  rC[0 +   4*GLOBAL_WRITE_VECTOR_WIDTH] += localLocalSplitU[(0 + serial*GLOBAL_WRITE_VECTOR_WIDTH+4*NUM_THREADS*GLOBAL_WRITE_VECTOR_WIDTH + 1*MT0I*MT1J)];
  rC[1 +   4*GLOBAL_WRITE_VECTOR_WIDTH] += localLocalSplitU[(1 + serial*GLOBAL_WRITE_VECTOR_WIDTH+4*NUM_THREADS*GLOBAL_WRITE_VECTOR_WIDTH + 1*MT0I*MT1J)];
  rC[0 +   5*GLOBAL_WRITE_VECTOR_WIDTH] += localLocalSplitU[(0 + serial*GLOBAL_WRITE_VECTOR_WIDTH+5*NUM_THREADS*GLOBAL_WRITE_VECTOR_WIDTH + 1*MT0I*MT1J)];
  rC[1 +   5*GLOBAL_WRITE_VECTOR_WIDTH] += localLocalSplitU[(1 + serial*GLOBAL_WRITE_VECTOR_WIDTH+5*NUM_THREADS*GLOBAL_WRITE_VECTOR_WIDTH + 1*MT0I*MT1J)];



  /* LocalSplitU: global write indices */

  unsigned int localC0I = (serial % (MT0I/GLOBAL_WRITE_VECTOR_WIDTH))*GLOBAL_WRITE_VECTOR_WIDTH;
  unsigned int globalC0I = (wg0I)*MT0I + localC0I;
  unsigned int flattenedGlobalC0 = globalC0I;
  unsigned int localC1J = serial / (MT0I/GLOBAL_WRITE_VECTOR_WIDTH);
  unsigned int globalC1J = (wg1J)*MT1J + localC1J;
  unsigned int flattenedGlobalC1 = globalC1J;


  /* LocalSplitU: global write */

  TYPE_MAC_WRITE( D[ GLOBAL_D( (uint64_t) globalC0I + 0, (uint64_t) globalC1J + 0) ], alpha, rC[0 + 0*GLOBAL_WRITE_VECTOR_WIDTH])
  TYPE_MAC_WRITE( D[ GLOBAL_D( (uint64_t) globalC0I + 0, (uint64_t) globalC1J + 0) ], alpha, rC[1 + 0*GLOBAL_WRITE_VECTOR_WIDTH])
  TYPE_MAC_WRITE( D[ GLOBAL_D( (uint64_t) globalC0I + 0, (uint64_t) globalC1J + 0) ], alpha, rC[0 + 1*GLOBAL_WRITE_VECTOR_WIDTH])
  TYPE_MAC_WRITE( D[ GLOBAL_D( (uint64_t) globalC0I + 0, (uint64_t) globalC1J + 0) ], alpha, rC[1 + 1*GLOBAL_WRITE_VECTOR_WIDTH])
  TYPE_MAC_WRITE( D[ GLOBAL_D( (uint64_t) globalC0I + 0, (uint64_t) globalC1J + 0) ], alpha, rC[0 + 2*GLOBAL_WRITE_VECTOR_WIDTH])
  TYPE_MAC_WRITE( D[ GLOBAL_D( (uint64_t) globalC0I + 0, (uint64_t) globalC1J + 0) ], alpha, rC[1 + 2*GLOBAL_WRITE_VECTOR_WIDTH])
  TYPE_MAC_WRITE( D[ GLOBAL_D( (uint64_t) globalC0I + 0, (uint64_t) globalC1J + 0) ], alpha, rC[0 + 3*GLOBAL_WRITE_VECTOR_WIDTH])
  TYPE_MAC_WRITE( D[ GLOBAL_D( (uint64_t) globalC0I + 0, (uint64_t) globalC1J + 0) ], alpha, rC[1 + 3*GLOBAL_WRITE_VECTOR_WIDTH])
  TYPE_MAC_WRITE( D[ GLOBAL_D( (uint64_t) globalC0I + 0, (uint64_t) globalC1J + 0) ], alpha, rC[0 + 4*GLOBAL_WRITE_VECTOR_WIDTH])
  TYPE_MAC_WRITE( D[ GLOBAL_D( (uint64_t) globalC0I + 0, (uint64_t) globalC1J + 0) ], alpha, rC[1 + 4*GLOBAL_WRITE_VECTOR_WIDTH])
  TYPE_MAC_WRITE( D[ GLOBAL_D( (uint64_t) globalC0I + 0, (uint64_t) globalC1J + 0) ], alpha, rC[0 + 5*GLOBAL_WRITE_VECTOR_WIDTH])
  TYPE_MAC_WRITE( D[ GLOBAL_D( (uint64_t) globalC0I + 0, (uint64_t) globalC1J + 0) ], alpha, rC[1 + 5*GLOBAL_WRITE_VECTOR_WIDTH])


}



